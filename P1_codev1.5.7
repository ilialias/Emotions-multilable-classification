{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fb42fe5a",
   "metadata": {},
   "source": [
    "## Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9dd9d997",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "669\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "folder_path = 'C:/Users/user/Desktop/MASTER/P1/Data/LATEST/'\n",
    "\n",
    "# Initialize an empty list to store DataFrames\n",
    "dfs = []\n",
    "\n",
    "# Iterate through each file in the folder\n",
    "for filename in os.listdir(folder_path):\n",
    "    if filename.endswith('.xlsx'):\n",
    "        # Read the Excel file into a DataFrame\n",
    "        emotion_name = os.path.splitext(filename)[0]  # Extract emotion name from the filename\n",
    "        file_path = os.path.join(folder_path, filename)\n",
    "        df = pd.read_excel(file_path)\n",
    "        \n",
    "        # Add a new column 'emotion1' to label each emotion\n",
    "        df['emotion1'] = emotion_name\n",
    "        \n",
    "        # Append the DataFrame to the list\n",
    "        dfs.append(df)\n",
    "\n",
    "# Concatenate all DataFrames into a single combined DataFrame\n",
    "combined_emotions = pd.concat(dfs, ignore_index=True)\n",
    "\n",
    "#Remove duplicates\n",
    "combined_emotions.drop_duplicates(subset=['source', 'emotion1'], inplace=True)\n",
    "\n",
    "combined_emotions.rename(columns={'verse': 'arabic_verse'}, inplace=True)\n",
    "\n",
    "combined_emotions['source'] = combined_emotions['source'].astype(str)\n",
    "combined_emotions['cleaned_source'] = combined_emotions['source'].str.extract(r'\\[(.*?)\\]')\n",
    "combined_emotions.drop(columns=['source'], inplace=True)\n",
    "combined_emotions.rename(columns={'cleaned_source': 'source'}, inplace=True)\n",
    "combined_emotions[['surah', 'verse']] = combined_emotions['source'].str.split(':', expand=True)\n",
    "\n",
    "# Convert 'surah' and 'verse' columns to integers, 'trans' to string\n",
    "combined_emotions['surah'] = pd.to_numeric(combined_emotions['surah'], errors='coerce')\n",
    "combined_emotions['verse'] = pd.to_numeric(combined_emotions['verse'], errors='coerce')\n",
    "combined_emotions['trans'] = combined_emotions['trans'].astype('str')\n",
    "\n",
    "print(len(combined_emotions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d9838045",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "verse_source    object\n",
      "arabic_verse    object\n",
      "emotion         object\n",
      "trans           object\n",
      "emotion1        object\n",
      "source          object\n",
      "surah            int64\n",
      "verse            int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(combined_emotions.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97f8d152",
   "metadata": {},
   "source": [
    "### Multi-hot encoding the label (emotions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fbf4282d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>surah</th>\n",
       "      <th>verse</th>\n",
       "      <th>trans</th>\n",
       "      <th>emotion_anger</th>\n",
       "      <th>emotion_embarrassment</th>\n",
       "      <th>emotion_envy</th>\n",
       "      <th>emotion_fear</th>\n",
       "      <th>emotion_guilt</th>\n",
       "      <th>emotion_helpless</th>\n",
       "      <th>emotion_loneliness</th>\n",
       "      <th>emotion_panic</th>\n",
       "      <th>emotion_pride</th>\n",
       "      <th>emotion_shame</th>\n",
       "      <th>emotion_troubled</th>\n",
       "      <th>emotion_worry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>236</td>\n",
       "      <td>There is no blame upon you if you divorce wome...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>It is He who shows you lightening, [causing] f...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>15</td>\n",
       "      <td>As for 'Aad, they were arrogant upon the earth...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>39</td>\n",
       "      <td>26</td>\n",
       "      <td>So Allah made them taste disgrace in worldly l...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>39</td>\n",
       "      <td>9</td>\n",
       "      <td>Is one who is devoutly obedient during periods...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   surah  verse                                              trans  \\\n",
       "0      2    236  There is no blame upon you if you divorce wome...   \n",
       "1     13     12  It is He who shows you lightening, [causing] f...   \n",
       "2     41     15  As for 'Aad, they were arrogant upon the earth...   \n",
       "3     39     26  So Allah made them taste disgrace in worldly l...   \n",
       "4     39      9  Is one who is devoutly obedient during periods...   \n",
       "\n",
       "   emotion_anger  emotion_embarrassment  emotion_envy  emotion_fear  \\\n",
       "0              1                      0             0             0   \n",
       "1              0                      0             0             1   \n",
       "2              0                      0             0             0   \n",
       "3              0                      1             0             0   \n",
       "4              0                      0             0             1   \n",
       "\n",
       "   emotion_guilt  emotion_helpless  emotion_loneliness  emotion_panic  \\\n",
       "0              1                 1                   0              0   \n",
       "1              0                 0                   0              0   \n",
       "2              0                 0                   0              0   \n",
       "3              0                 0                   0              0   \n",
       "4              0                 0                   0              0   \n",
       "\n",
       "   emotion_pride  emotion_shame  emotion_troubled  emotion_worry  \n",
       "0              0              0                 0              0  \n",
       "1              0              0                 0              0  \n",
       "2              1              0                 0              0  \n",
       "3              0              1                 0              0  \n",
       "4              0              0                 0              0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def encode_emotions(df):\n",
    "    # Create one-hot encoding for 'emotion1'\n",
    "    one_hot_encoded = pd.get_dummies(df['emotion1'], prefix='emotion')\n",
    "\n",
    "    # Group by 'source' and sum the one-hot encoded columns\n",
    "    grouped_emotions_encoded = one_hot_encoded.groupby(df['source']).transform(lambda x: x.max())\n",
    "\n",
    "    # Concatenate the one-hot encoded DataFrame with the original DataFrame\n",
    "    encoded = pd.concat([df[['surah', 'verse', 'trans']], grouped_emotions_encoded], axis=1)\n",
    "\n",
    "    return encoded\n",
    "\n",
    "encoded = encode_emotions(combined_emotions)\n",
    "\n",
    "# Shuffle the rows in the 'encoded' DataFrame\n",
    "encoded = encoded.sample(frac=1, random_state=42).reset_index(drop=True)\n",
    "encoded.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "44d91f84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "165\n"
     ]
    }
   ],
   "source": [
    "#Checking the number of maximum number\n",
    "max_len_estimate = encoded['trans'].apply(lambda x:len(str(x).split())).max()\n",
    "max_len = int(max_len_estimate * 1.1) \n",
    "print(max_len)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45f64674",
   "metadata": {},
   "source": [
    "### EDA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85551f6c",
   "metadata": {},
   "source": [
    "Checking the distribution of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "06731c01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "categories = list(encoded.columns.values[3:])\n",
    "sns.set(font_scale=2)\n",
    "plt.figure(figsize=(15, 8))\n",
    "ax = sns.barplot(x=categories, y=pd.to_numeric(encoded.iloc[:, 3:].sum().values))\n",
    "plt.title(\"Emotions associated with anxiety\", fontsize=24)\n",
    "plt.ylabel('Number of verses', fontsize=18)\n",
    "plt.xlabel('Emotions', fontsize=18)  # Update x-axis label\n",
    "\n",
    "# Adding the text labels\n",
    "rects = ax.patches\n",
    "labels = encoded.iloc[:, 3:].sum().values\n",
    "for rect, label in zip(rects, labels):\n",
    "    height = rect.get_height()\n",
    "    ax.text(rect.get_x() + rect.get_width()/2, height + 5, label, ha='center', va='bottom', fontsize=18)\n",
    "\n",
    "plt.xticks(rotation=90)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3367ca4f",
   "metadata": {},
   "source": [
    "The dataset is imbalanced"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "351e1802",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "row_sums = encoded.iloc[:, 3:].sum(axis=1)\n",
    "multi_label_counts = row_sums.value_counts()\n",
    "multi_label_counts = multi_label_counts.iloc[1:]\n",
    "\n",
    "sns.set(font_scale=2)\n",
    "plt.figure(figsize=(15, 8))\n",
    "ax = sns.barplot(multi_label_counts.index, multi_label_counts.values)\n",
    "plt.title(\"Verses having multiple labels \")\n",
    "plt.ylabel('Number of verses', fontsize=18)\n",
    "plt.xlabel('Number of labels', fontsize=18)\n",
    "\n",
    "# Adding the text labels\n",
    "rects = ax.patches\n",
    "labels = multi_label_counts.values\n",
    "for rect, label in zip(rects, labels):\n",
    "    height = rect.get_height()\n",
    "    ax.text(rect.get_x() + rect.get_width()/2, height + 5, label, ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8796e02f",
   "metadata": {},
   "source": [
    "## Text Processing\n",
    "\n",
    "Lower-case and then use custom made functions to remove html-tags, punctuation and non-alphabetic characters from the comments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d08bde98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "669\n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "# nltk.download('stopwords')  # Uncomment if stopwords are not downloaded\n",
    "from nltk.corpus import stopwords\n",
    "import re\n",
    "import sys\n",
    "import warnings\n",
    "\n",
    "\n",
    "data = encoded.copy()  \n",
    "\n",
    "if not sys.warnoptions:\n",
    "    warnings.simplefilter(\"ignore\")\n",
    "\n",
    "def cleanHtml(sentence):\n",
    "    cleanr = re.compile('<.*?>')\n",
    "    cleantext = re.sub(cleanr, ' ', str(sentence))\n",
    "    return cleantext\n",
    "\n",
    "def cleanPunc(sentence):\n",
    "    cleaned = re.sub(r'[?|!|\\'|\"|#]', r'', sentence)\n",
    "    cleaned = re.sub(r'[.|,|)|(|\\|/]', r' ', cleaned)\n",
    "    cleaned = cleaned.strip()\n",
    "    cleaned = cleaned.replace(\"\\n\", \" \")\n",
    "    return cleaned\n",
    "\n",
    "def keepAlpha(sentence):\n",
    "    alpha_sent = \"\"\n",
    "    for word in sentence.split():\n",
    "        alpha_word = re.sub('[^a-z A-Z]+', ' ', word)\n",
    "        alpha_sent += alpha_word\n",
    "        alpha_sent += \" \"\n",
    "    alpha_sent = alpha_sent.strip()\n",
    "    # Replace consecutive spaces with a single space\n",
    "    alpha_sent = re.sub(' +', ' ', alpha_sent)\n",
    "    return alpha_sent\n",
    "\n",
    "# Apply text cleaning operations to the 'trans' column\n",
    "data['trans'] = data['trans'].str.lower()\n",
    "data['trans'] = data['trans'].apply(cleanHtml)\n",
    "data['trans'] = data['trans'].apply(cleanPunc)\n",
    "data['trans'] = data['trans'].apply(keepAlpha)\n",
    "\n",
    "# Create a copy of the DataFrame to retain stopwords, this is for alternative method if got time\n",
    "dataWithStopwords = data.copy()\n",
    "#dataWithStopwords.to_excel('C:/Users/user/Desktop/MASTER/P1/Data/CLEANED/WithStopwords_v1.1.xlsx', index=False)\n",
    "\n",
    "#dataWithStopwords.head()\n",
    "print(len(data))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbad3d9a",
   "metadata": {},
   "source": [
    "### 1. NLTK Tokenization and Lemmatization Approach\n",
    "\n",
    "This part of the code uses the NLTK library for tokenization (nltk.word_tokenize) and lemmatization (WordNetLemmatizer). It tokenizes the input text into words, converts each token to lowercase, lemmatizes them, and removes stopwords. the NLTK approach focuses on natural language processing tasks, where tokenization and lemmatization are applied using NLTK functions. NLTK is used for linguistic preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "39cf52b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gensim.models import Word2Vec\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "import numpy as np\n",
    "from keras.preprocessing import sequence\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# NLTK Tokenization and Lemmatization\n",
    "stop_words = set(stopwords.words('english'))\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def preprocess_text(text):\n",
    "    tokens = nltk.word_tokenize(text)\n",
    "    tokens = [lemmatizer.lemmatize(token.lower()) for token in tokens if token.isalpha() and token.lower() not in stop_words]\n",
    "    return tokens\n",
    "#' '.join(tokens)\n",
    "\n",
    "# Tokenization and Lemmatization on the entire DataFrame\n",
    "data['trans'] = data['trans'].astype(str)\n",
    "data['trans'] = data['trans'].apply(preprocess_text)\n",
    "\n",
    "# Split the data into train and test sets\n",
    "train, test = train_test_split(data, random_state=42, test_size=0.30, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e2316e00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Data Shape: (468, 100)\n",
      "Test Data Shape: (201, 100)\n",
      "Train Labels Shape: (468, 12)\n",
      "Test Labels Shape: (201, 12)\n"
     ]
    }
   ],
   "source": [
    "# Word2Vec Model Embedding\n",
    "model = Word2Vec(sentences=train['trans'], vector_size=100, window=5, min_count=1, workers=4)\n",
    "\n",
    "# Function to average word vectors for a document\n",
    "def average_word_vectors(words, model, vocabulary, num_features):\n",
    "    feature_vector = np.zeros((num_features,), dtype=\"float64\")\n",
    "    nwords = 0.\n",
    "    \n",
    "    for word in words:\n",
    "        if word in vocabulary: \n",
    "            nwords = nwords + 1.\n",
    "            feature_vector = np.add(feature_vector, model.wv[word])\n",
    "    \n",
    "    if nwords:\n",
    "        feature_vector = np.divide(feature_vector, nwords)\n",
    "        \n",
    "    return feature_vector\n",
    "        \n",
    "x_train = [average_word_vectors(sentence, model, model.wv.index_to_key, 100) for sentence in train['trans']]\n",
    "x_test = [average_word_vectors(sentence, model, model.wv.index_to_key, 100) for sentence in test['trans']]\n",
    "\n",
    "# Convert lists to NumPy arrays\n",
    "x_train = np.array(x_train)\n",
    "x_test = np.array(x_test)\n",
    "\n",
    "# 'surah', 'verse', 'trans' are the columns to be dropped as labels\n",
    "y_train = train.drop(labels=['surah', 'verse', 'trans'], axis=1)\n",
    "y_test = test.drop(labels=['surah', 'verse', 'trans'], axis=1)\n",
    "\n",
    "# Convert multi-hot encoded labels to numpy array\n",
    "y_train = np.array(y_train)\n",
    "y_test = np.array(y_test)\n",
    "\n",
    "print(\"Train Data Shape:\", x_train.shape)\n",
    "print(\"Test Data Shape:\", x_test.shape)\n",
    "print(\"Train Labels Shape:\", y_train.shape)\n",
    "print(\"Test Labels Shape:\", y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "362eb0c7",
   "metadata": {},
   "source": [
    "Assuming that y_train is a list of lists representing the labels for each sample, it converts these labels into a list of tuples of strings (y_train_tuples). This step is necessary for the MultiLabelBinarizer to work correctly.\n",
    "\n",
    "It uses the MultiLabelBinarizer from scikit-learn to binarize the labels. This means converting the categorical labels into a binary matrix representation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "def1a769",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Data Shape: (468, 100)\n",
      "Labels Shape: (468, 2)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "\n",
    "# y_train is a list of lists\n",
    "y_train_tuples = [tuple(map(str, labels)) for labels in y_train]\n",
    "\n",
    "mlb = MultiLabelBinarizer()\n",
    "y_train_one_hot = mlb.fit_transform(y_train_tuples)\n",
    "\n",
    "#CHECKING\n",
    "print(\"Train Data Shape:\", x_train.shape)\n",
    "print(\"Labels Shape:\", y_train_one_hot.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56450580",
   "metadata": {},
   "source": [
    "### Model performance function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5b0105b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, hamming_loss\n",
    "\n",
    "def evaluate_model_performance(y_true, y_pred):\n",
    "    # Accuracy\n",
    "    accuracy = accuracy_score(y_true, y_pred)\n",
    "    print(f\"Test Accuracy: {accuracy}\")\n",
    "\n",
    "    # Precision, Recall, F1 Score\n",
    "    precision = precision_score(y_true, y_pred, average='weighted')\n",
    "    recall = recall_score(y_true, y_pred, average='weighted')\n",
    "    f1 = f1_score(y_true, y_pred, average='weighted')\n",
    "\n",
    "    print(f\"Precision: {precision}\")\n",
    "    print(f\"Recall: {recall}\")\n",
    "    print(f\"F1 Score: {f1}\")\n",
    "\n",
    "    # Hamming Loss\n",
    "    hamming_loss_value = hamming_loss(y_true, y_pred)\n",
    "    print(f\"Hamming Loss: {hamming_loss_value}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f33b15d",
   "metadata": {},
   "source": [
    "#### Neural Network\n",
    "\n",
    "It defines a simple neural network model using Keras Sequential API.\n",
    "The model has an input layer with 20 neurons, a hidden layer with 64 neurons, and an output layer with 12 neurons (based on the assumption of 12 classes).\n",
    "The activation function for the hidden layers is 'relu', and for the output layer, it's 'sigmoid' since it's a multi-label classification problem.\n",
    "\n",
    "This code uses categorical cross-entropy as the loss function and softmax activation in the output layer for multiclass classification. Also, it directly one-hot encodes the labels using to_categorical. Adjust the number of units in the output layer based on the number of classes in our problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "ec90e286",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense (Dense)               (None, 20)                3320      \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 20)                0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 64)                1344      \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 64)                0         \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 12)                780       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 5444 (21.27 KB)\n",
      "Trainable params: 5444 (21.27 KB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#MODEL 1\n",
    "# Define a simple neural network\n",
    "model1 = Sequential()\n",
    "model1.add(Dense(20, input_dim=x_train.shape[1], activation='relu'))\n",
    "model1.add(Dropout(0.3))\n",
    "model1.add(Dense(64, activation='relu'))\n",
    "model1.add(Dropout(0.3))\n",
    "model1.add(Dense(12, activation='sigmoid'))\n",
    "\n",
    "# Compile the model\n",
    "#model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "model1.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "model1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "226b4131",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "12/12 [==============================] - 4s 52ms/step - loss: 4492.7334 - accuracy: 0.0989 - val_loss: 1708.1403 - val_accuracy: 0.1596\n",
      "Epoch 2/30\n",
      "12/12 [==============================] - 0s 8ms/step - loss: 2011.5602 - accuracy: 0.1471 - val_loss: 777.6870 - val_accuracy: 0.2234\n",
      "Epoch 3/30\n",
      "12/12 [==============================] - 0s 8ms/step - loss: 1231.0223 - accuracy: 0.1604 - val_loss: 568.2173 - val_accuracy: 0.2021\n",
      "Epoch 4/30\n",
      "12/12 [==============================] - 0s 8ms/step - loss: 815.2276 - accuracy: 0.1310 - val_loss: 461.2475 - val_accuracy: 0.2021\n",
      "Epoch 5/30\n",
      "12/12 [==============================] - 0s 10ms/step - loss: 623.3691 - accuracy: 0.1471 - val_loss: 369.1102 - val_accuracy: 0.2021\n",
      "Epoch 6/30\n",
      "12/12 [==============================] - 0s 9ms/step - loss: 465.9795 - accuracy: 0.1684 - val_loss: 279.9101 - val_accuracy: 0.1915\n",
      "Epoch 7/30\n",
      "12/12 [==============================] - 0s 7ms/step - loss: 368.0025 - accuracy: 0.1791 - val_loss: 215.0934 - val_accuracy: 0.2021\n",
      "Epoch 8/30\n",
      "12/12 [==============================] - 0s 12ms/step - loss: 246.9028 - accuracy: 0.1765 - val_loss: 169.0682 - val_accuracy: 0.2021\n",
      "Epoch 9/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 211.6833 - accuracy: 0.1684 - val_loss: 134.6447 - val_accuracy: 0.2021\n",
      "Epoch 10/30\n",
      "12/12 [==============================] - 0s 12ms/step - loss: 147.3113 - accuracy: 0.1791 - val_loss: 105.0195 - val_accuracy: 0.2128\n",
      "Epoch 11/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 116.6098 - accuracy: 0.1578 - val_loss: 88.0573 - val_accuracy: 0.2340\n",
      "Epoch 12/30\n",
      "12/12 [==============================] - 0s 12ms/step - loss: 106.7694 - accuracy: 0.1738 - val_loss: 76.1554 - val_accuracy: 0.2128\n",
      "Epoch 13/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 92.6478 - accuracy: 0.1898 - val_loss: 66.8020 - val_accuracy: 0.1809\n",
      "Epoch 14/30\n",
      "12/12 [==============================] - 0s 12ms/step - loss: 75.9130 - accuracy: 0.1791 - val_loss: 57.3020 - val_accuracy: 0.1596\n",
      "Epoch 15/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 66.1978 - accuracy: 0.1872 - val_loss: 50.3485 - val_accuracy: 0.1596\n",
      "Epoch 16/30\n",
      "12/12 [==============================] - 0s 10ms/step - loss: 56.7922 - accuracy: 0.2273 - val_loss: 44.1375 - val_accuracy: 0.3404\n",
      "Epoch 17/30\n",
      "12/12 [==============================] - 0s 9ms/step - loss: 35.8201 - accuracy: 0.2112 - val_loss: 38.8029 - val_accuracy: 0.3511\n",
      "Epoch 18/30\n",
      "12/12 [==============================] - 0s 10ms/step - loss: 42.4929 - accuracy: 0.1898 - val_loss: 34.3609 - val_accuracy: 0.3511\n",
      "Epoch 19/30\n",
      "12/12 [==============================] - 0s 11ms/step - loss: 31.4437 - accuracy: 0.2139 - val_loss: 30.3388 - val_accuracy: 0.3511\n",
      "Epoch 20/30\n",
      "12/12 [==============================] - 0s 14ms/step - loss: 29.5759 - accuracy: 0.2246 - val_loss: 27.4070 - val_accuracy: 0.3617\n",
      "Epoch 21/30\n",
      "12/12 [==============================] - 0s 12ms/step - loss: 22.0323 - accuracy: 0.2460 - val_loss: 24.7842 - val_accuracy: 0.3723\n",
      "Epoch 22/30\n",
      "12/12 [==============================] - 0s 12ms/step - loss: 17.0558 - accuracy: 0.2647 - val_loss: 22.8204 - val_accuracy: 0.3723\n",
      "Epoch 23/30\n",
      "12/12 [==============================] - 0s 12ms/step - loss: 17.3561 - accuracy: 0.2380 - val_loss: 21.4254 - val_accuracy: 0.3723\n",
      "Epoch 24/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 17.2398 - accuracy: 0.2460 - val_loss: 19.9749 - val_accuracy: 0.3723\n",
      "Epoch 25/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 13.0102 - accuracy: 0.2487 - val_loss: 18.7602 - val_accuracy: 0.3617\n",
      "Epoch 26/30\n",
      "12/12 [==============================] - 0s 9ms/step - loss: 12.4630 - accuracy: 0.2380 - val_loss: 17.4313 - val_accuracy: 0.3617\n",
      "Epoch 27/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 10.9158 - accuracy: 0.2513 - val_loss: 16.5415 - val_accuracy: 0.3723\n",
      "Epoch 28/30\n",
      "12/12 [==============================] - 0s 12ms/step - loss: 7.5994 - accuracy: 0.2781 - val_loss: 15.7155 - val_accuracy: 0.3723\n",
      "Epoch 29/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 7.6371 - accuracy: 0.2433 - val_loss: 15.0904 - val_accuracy: 0.3723\n",
      "Epoch 30/30\n",
      "12/12 [==============================] - 0s 13ms/step - loss: 7.8816 - accuracy: 0.2620 - val_loss: 14.5946 - val_accuracy: 0.3511\n",
      "15/15 [==============================] - 0s 2ms/step\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Shape of passed values is (468, 1), indices imply (468, 12)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_15516/2006913042.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     18\u001b[0m \u001b[0my_train_pred_one_hot\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmodel1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     19\u001b[0m \u001b[0my_train_pred_binary\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_train_pred_one_hot\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 20\u001b[1;33m \u001b[0my_train_true_binary\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     21\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     22\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py\u001b[0m in \u001b[0;36margmax\u001b[1;34m(a, axis, out, keepdims)\u001b[0m\n\u001b[0;32m   1227\u001b[0m     \"\"\"\n\u001b[0;32m   1228\u001b[0m     \u001b[0mkwds\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;34m'keepdims'\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[1;33m}\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mkeepdims\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_NoValue\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1229\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0m_wrapfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'argmax'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mout\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1230\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1231\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py\u001b[0m in \u001b[0;36m_wrapfunc\u001b[1;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[0;32m     54\u001b[0m     \u001b[0mbound\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     55\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mbound\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 56\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_wrapit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     57\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     58\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py\u001b[0m in \u001b[0;36m_wrapit\u001b[1;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[0;32m     47\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     48\u001b[0m             \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 49\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mwrap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     50\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     51\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__array_wrap__\u001b[1;34m(self, result, context)\u001b[0m\n\u001b[0;32m   2023\u001b[0m         \u001b[1;31m# error: Argument 1 to \"NDFrame\" has incompatible type \"ndarray\";\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2024\u001b[0m         \u001b[1;31m# expected \"BlockManager\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2025\u001b[1;33m         return self._constructor(res, **d).__finalize__(  # type: ignore[arg-type]\n\u001b[0m\u001b[0;32m   2026\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"__array_wrap__\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2027\u001b[0m         )\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[0;32m    670\u001b[0m                 )\n\u001b[0;32m    671\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 672\u001b[1;33m                 mgr = ndarray_to_mgr(\n\u001b[0m\u001b[0;32m    673\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    674\u001b[0m                     \u001b[0mindex\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\construction.py\u001b[0m in \u001b[0;36mndarray_to_mgr\u001b[1;34m(values, index, columns, dtype, copy, typ)\u001b[0m\n\u001b[0;32m    322\u001b[0m     )\n\u001b[0;32m    323\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 324\u001b[1;33m     \u001b[0m_check_values_indices_shape_match\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    325\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    326\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mtyp\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"array\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\construction.py\u001b[0m in \u001b[0;36m_check_values_indices_shape_match\u001b[1;34m(values, index, columns)\u001b[0m\n\u001b[0;32m    391\u001b[0m         \u001b[0mpassed\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    392\u001b[0m         \u001b[0mimplied\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 393\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"Shape of passed values is {passed}, indices imply {implied}\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    394\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    395\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Shape of passed values is (468, 1), indices imply (468, 12)"
     ]
    }
   ],
   "source": [
    "#MODEL 1\n",
    "# Define a simple neural network\n",
    "model1 = Sequential()\n",
    "model1.add(Dense(20, input_dim=x_train.shape[1], activation='relu'))\n",
    "model1.add(Dropout(0.3))\n",
    "model1.add(Dense(64, activation='relu'))\n",
    "model1.add(Dropout(0.3))\n",
    "model1.add(Dense(12, activation='sigmoid'))\n",
    "\n",
    "# Compile the model\n",
    "#model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "model1.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "history1 = model1.fit(x_train, y_train, epochs=30, batch_size=32, validation_split=0.2)\n",
    "\n",
    "# Evaluate the model on the training set\n",
    "y_train_pred_one_hot = model1.predict(x_train)\n",
    "y_train_pred_binary = np.argmax(y_train_pred_one_hot, axis=1)\n",
    "y_train_true_binary = np.argmax(y_train, axis=1)\n",
    "\n",
    "\n",
    "# Evaluate the model on the test set\n",
    "y_test_pred_one_hot = model1.predict(x_test)\n",
    "y_test_pred_binary = np.argmax(y_test_pred_one_hot, axis=1)\n",
    "y_test_true_binary = np.argmax(y_test, axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "45d79c9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training history for accuracy\n",
    "plt.plot(history1.history['accuracy'], label='Training Accuracy')\n",
    "plt.plot(history1.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.title('Model 1 Training Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Plot training history for loss\n",
    "plt.plot(history1.history['loss'], label='Training Loss')\n",
    "plt.plot(history1.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model 1 Training Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "2106d5e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simple Neural Network Training Set Performance:\n",
      "Test Accuracy: 0.39316239316239315\n",
      "Precision: 0.1545766673971802\n",
      "Recall: 0.39316239316239315\n",
      "F1 Score: 0.2219076084106759\n",
      "Hamming Loss: 0.6068376068376068\n"
     ]
    }
   ],
   "source": [
    "print(\"Simple Neural Network Training Set Performance:\")\n",
    "evaluate_model_performance(y_train_true_binary, y_train_pred_binary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "dae96246",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simple Neural Network Testing Set Performance:\n",
      "Test Accuracy: 0.3482587064676617\n",
      "Precision: 0.12128412663052897\n",
      "Recall: 0.3482587064676617\n",
      "F1 Score: 0.17991224688366286\n",
      "Hamming Loss: 0.6517412935323383\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Simple Neural Network Testing Set Performance:\")\n",
    "evaluate_model_performance(y_test_true_binary, y_test_pred_binary)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df9968ce",
   "metadata": {},
   "source": [
    "## 2. Using Transformer and BERT\n",
    "\n",
    "The data used here are the text data with stopwords, dataframenamed dataWithStopwords."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "e91ae1d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install transformers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "3fe7755a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "REPLICAS:  1\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import tensorflow as tf\n",
    "# Detect hardware, return appropriate distribution strategy\n",
    "try:\n",
    "    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n",
    "    # set: this is always the case on Kaggle.\n",
    "    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n",
    "    print('Running on TPU ', tpu.master())\n",
    "except ValueError:\n",
    "    tpu = None\n",
    "\n",
    "if tpu:\n",
    "    tf.config.experimental_connect_to_cluster(tpu)\n",
    "    tf.tpu.experimental.initialize_tpu_system(tpu)\n",
    "    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n",
    "else:\n",
    "    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n",
    "    strategy = tf.distribute.get_strategy()\n",
    "\n",
    "print(\"REPLICAS: \", strategy.num_replicas_in_sync)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "3564a0e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Dense, Input\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint\n",
    "from tokenizers import BertWordPieceTokenizer\n",
    "import numpy as np\n",
    "import transformers\n",
    "from tqdm import tqdm\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# Fix for deprecated warnings\n",
    "tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)\n",
    "\n",
    "# Assuming you are using the 'tf.distribute.MirroredStrategy' strategy\n",
    "strategy = tf.distribute.MirroredStrategy()\n",
    "\n",
    "def fast_encode(texts, tokenizer, chunk_size=256, maxlen=512):\n",
    "    \"\"\"\n",
    "    Encoder for encoding the text into a sequence of integers for BERT Input\n",
    "    \"\"\"\n",
    "    all_ids = []\n",
    "\n",
    "    for i in tqdm(range(0, len(texts), chunk_size)):\n",
    "        text_chunk = texts[i:i + chunk_size].tolist()\n",
    "        encs = tokenizer.encode_batch(text_chunk)\n",
    "        padded_ids = pad_sequences([enc.ids for enc in encs], maxlen=maxlen, padding='post', truncating='post')\n",
    "        all_ids.extend(padded_ids)\n",
    "\n",
    "    return np.array(all_ids)\n",
    "\n",
    "\n",
    "#IMP DATA FOR CONFIG\n",
    "\n",
    "AUTO = tf.data.experimental.AUTOTUNE\n",
    "\n",
    "\n",
    "# Configuration\n",
    "EPOCHS = 30\n",
    "BATCH_SIZE = 16 * strategy.num_replicas_in_sync\n",
    "MAX_LEN = 165"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "45106265",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Tokenizer(vocabulary_size=119547, model=BertWordPiece, unk_token=[UNK], sep_token=[SEP], cls_token=[CLS], pad_token=[PAD], mask_token=[MASK], clean_text=True, handle_chinese_chars=True, strip_accents=None, lowercase=False, wordpieces_prefix=##)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tokenization\n",
    "\n",
    "# First load the real tokenizer\n",
    "tokenizer = transformers.DistilBertTokenizer.from_pretrained('distilbert-base-multilingual-cased')\n",
    "# Save the loaded tokenizer locally\n",
    "tokenizer.save_pretrained('.')\n",
    "# Reload it with the huggingface tokenizers library\n",
    "fast_tokenizer = BertWordPieceTokenizer('vocab.txt', lowercase=False)\n",
    "fast_tokenizer\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "d2af78e2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2/2 [00:00<00:00, 23.38it/s]\n",
      "100%|██████████| 1/1 [00:00<00:00, 56.77it/s]\n",
      "100%|██████████| 1/1 [00:00<00:00, 46.42it/s]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train, temp = train_test_split(dataWithStopwords, test_size=0.3, random_state=42, shuffle=True)\n",
    "\n",
    "# Split the temp data into validation (15%) and test (15%)\n",
    "validation, test = train_test_split(temp, test_size=0.5, random_state=42, shuffle=True)\n",
    "\n",
    "x_train = fast_encode(train.trans.astype(str), fast_tokenizer, maxlen=MAX_LEN)\n",
    "x_valid = fast_encode(validation.trans.astype(str), fast_tokenizer, maxlen=MAX_LEN)\n",
    "x_test = fast_encode(test.trans.astype(str), fast_tokenizer, maxlen=MAX_LEN)\n",
    "\n",
    "y_train = train.drop(labels=['surah', 'verse', 'trans'], axis=1).values\n",
    "y_valid = validation.drop(labels=['surah', 'verse', 'trans'], axis=1).values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "1f40badb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Data Shape: (468, 15)\n",
      "Validation Data Shape: (100, 15)\n",
      "Test Data Shape: (101, 15)\n",
      "label y_train (468, 12)\n",
      "label y_valid (100, 12)\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Data Shape:\", train.shape)\n",
    "print(\"Validation Data Shape:\", validation.shape)\n",
    "print(\"Test Data Shape:\", test.shape)\n",
    "\n",
    "print(\"label y_train\", y_train.shape)\n",
    "print(\"label y_valid\", y_valid.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "6331b0f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Data Shape: (468, 165)\n",
      "Test Data Shape: (101, 165)\n",
      "Valid Data Shape: (100, 165)\n",
      "Train Labels Shape: (468, 12)\n",
      "Validation Labels Shape: (100, 12)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "x_train = np.array(x_train)\n",
    "x_valid = np.array(x_valid)\n",
    "x_test = np.array(x_test)\n",
    "y_train = np.array(y_train)\n",
    "y_valid = np.array(y_valid)\n",
    "\n",
    "print(\"Train Data Shape:\", x_train.shape)\n",
    "print(\"Test Data Shape:\", x_test.shape)\n",
    "print(\"Valid Data Shape:\", x_valid.shape)\n",
    "print(\"Train Labels Shape:\", y_train.shape)\n",
    "print(\"Validation Labels Shape:\", y_valid.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "73df36e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['surah', 'verse', 'trans', 'emotion_anger', 'emotion_embarrassment',\n",
      "       'emotion_envy', 'emotion_fear', 'emotion_guilt', 'emotion_helpless',\n",
      "       'emotion_loneliness', 'emotion_panic', 'emotion_pride', 'emotion_shame',\n",
      "       'emotion_troubled', 'emotion_worry'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "#print(pd.DataFrame(x_train))\n",
    "print(test.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "542d610e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "train_dataset = (\n",
    "    tf.data.Dataset\n",
    "    .from_tensor_slices((x_train, y_train))\n",
    "    .repeat()\n",
    "    .shuffle(2048)\n",
    "    .batch(BATCH_SIZE)\n",
    "    .prefetch(AUTO)\n",
    ")\n",
    "\n",
    "valid_dataset = (\n",
    "    tf.data.Dataset\n",
    "    .from_tensor_slices((x_valid, y_valid))\n",
    "    .batch(BATCH_SIZE)\n",
    "    .cache()\n",
    "    .prefetch(AUTO)\n",
    ")\n",
    "\n",
    "test_dataset = (\n",
    "    tf.data.Dataset\n",
    "    .from_tensor_slices(x_test)\n",
    "    .batch(BATCH_SIZE)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "72fc64ab",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFDistilBertModel: ['vocab_projector.bias', 'vocab_transform.weight', 'vocab_transform.bias', 'vocab_layer_norm.bias', 'vocab_layer_norm.weight']\n",
      "- This IS expected if you are initializing TFDistilBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n",
      "- This IS NOT expected if you are initializing TFDistilBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n",
      "All the weights of TFDistilBertModel were initialized from the PyTorch model.\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertModel for predictions without further training.\n",
      "WARNING:absl:`lr` is deprecated in Keras optimizer, please use `learning_rate` or use the legacy optimizer, e.g.,tf.keras.optimizers.legacy.Adam.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_word_ids (InputLayer  [(None, 165)]             0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " tf_distil_bert_model_1 (TF  TFBaseModelOutput(last_   134734080 \n",
      " DistilBertModel)            hidden_state=(None, 165             \n",
      "                             , 768),                             \n",
      "                              hidden_states=None, at             \n",
      "                             tentions=None)                      \n",
      "                                                                 \n",
      " tf.__operators__.getitem_1  (None, 768)               0         \n",
      "  (SlicingOpLambda)                                              \n",
      "                                                                 \n",
      " dense_13 (Dense)            (None, 12)                9228      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 134743308 (514.00 MB)\n",
      "Trainable params: 134743308 (514.00 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def build_model(transformer, max_len=512, num_classes=12):\n",
    "    \"\"\"\n",
    "    function for training the BERT model\n",
    "    \"\"\"\n",
    "    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n",
    "    sequence_output = transformer(input_word_ids)[0]\n",
    "    cls_token = sequence_output[:, 0, :]\n",
    "    out = Dense(num_classes, activation='sigmoid')(cls_token)\n",
    "\n",
    "    model = Model(inputs=input_word_ids, outputs=out)\n",
    "    model.compile(Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "    return model\n",
    "\n",
    "with strategy.scope():\n",
    "    transformer_layer = transformers.TFDistilBertModel.from_pretrained('distilbert-base-multilingual-cased')\n",
    "    model2 = build_model(transformer_layer, max_len=MAX_LEN, num_classes=12)\n",
    "model2.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "d5239643",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in y_train_encoded: [0 1]\n",
      "Unique values in y_valid_encoded: [0 1]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Encode labels using LabelEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "\n",
    "# Flatten the arrays to handle multi-label scenarios\n",
    "y_train_flat = y_train.flatten()\n",
    "y_valid_flat = y_valid.flatten()\n",
    "\n",
    "# Fit and transform on the training set\n",
    "y_train_encoded = label_encoder.fit_transform(y_train_flat)\n",
    "\n",
    "# Transform the validation set\n",
    "y_valid_encoded = label_encoder.transform(y_valid_flat)\n",
    "\n",
    "# Reshape back to the original shape\n",
    "y_train_encoded = y_train_encoded.reshape(y_train.shape)\n",
    "y_valid_encoded = y_valid_encoded.reshape(y_valid.shape)\n",
    "\n",
    "# Print unique values in encoded labels\n",
    "print(\"Unique values in y_train_encoded:\", np.unique(y_train_encoded))\n",
    "print(\"Unique values in y_valid_encoded:\", np.unique(y_valid_encoded))\n",
    "\n",
    "from keras.utils import to_categorical\n",
    "\n",
    "# Convert labels to one-hot encoding\n",
    "y_train_one_hot = to_categorical(y_train_encoded, num_classes=12)\n",
    "y_valid_one_hot = to_categorical(y_valid_encoded, num_classes=12)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "8c97a801",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Data Shape: (468, 12, 12, 12)\n",
      "Valid Data Shape: (100, 12, 12, 12)\n"
     ]
    }
   ],
   "source": [
    "#Checking\n",
    "print(\"Train Data Shape:\", y_train_one_hot.shape)\n",
    "print(\"Valid Data Shape:\", y_valid_one_hot.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b855e1f1",
   "metadata": {},
   "source": [
    "#### Training Bert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "fda1d5cc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Data Shape: (468, 165)\n",
      "Test Data Shape: (101, 165)\n",
      "Valid Data Shape: (100, 165)\n",
      "Train Labels Shape: (468, 12, 12)\n",
      "Validation Labels Shape: (100, 12, 12)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "x_train = np.array(x_train)\n",
    "x_valid = np.array(x_valid)\n",
    "x_test = np.array(x_test)\n",
    "y_train = np.array(y_train_one_hot)\n",
    "y_valid = np.array(y_valid_one_hot)\n",
    "\n",
    "print(\"Train Data Shape:\", x_train.shape)\n",
    "print(\"Test Data Shape:\", x_test.shape)\n",
    "print(\"Valid Data Shape:\", x_valid.shape)\n",
    "print(\"Train Labels Shape:\", y_train_one_hot.shape)\n",
    "print(\"Validation Labels Shape:\", y_valid_one_hot.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "cc941976",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "29/29 [==============================] - 329s 10s/step - loss: 0.5389 - accuracy: 0.2651 - val_loss: 0.3260 - val_accuracy: 0.3100\n",
      "Epoch 2/30\n",
      "29/29 [==============================] - 293s 10s/step - loss: 0.3287 - accuracy: 0.3642 - val_loss: 0.3254 - val_accuracy: 0.3100\n",
      "Epoch 3/30\n",
      "29/29 [==============================] - 272s 9s/step - loss: 0.3266 - accuracy: 0.4181 - val_loss: 0.3236 - val_accuracy: 0.3100\n",
      "Epoch 4/30\n",
      "29/29 [==============================] - 239s 8s/step - loss: 0.3329 - accuracy: 0.3254 - val_loss: 0.3383 - val_accuracy: 0.3100\n",
      "Epoch 5/30\n",
      "29/29 [==============================] - 241s 8s/step - loss: 0.3318 - accuracy: 0.3621 - val_loss: 0.3224 - val_accuracy: 0.3100\n",
      "Epoch 6/30\n",
      "29/29 [==============================] - 241s 8s/step - loss: 0.3224 - accuracy: 0.3728 - val_loss: 0.3397 - val_accuracy: 0.3100\n",
      "Epoch 7/30\n",
      "29/29 [==============================] - 240s 8s/step - loss: 0.3193 - accuracy: 0.4159 - val_loss: 0.3333 - val_accuracy: 0.3100\n",
      "Epoch 8/30\n",
      "29/29 [==============================] - 284s 10s/step - loss: 0.3195 - accuracy: 0.4203 - val_loss: 0.3232 - val_accuracy: 0.3100\n",
      "Epoch 9/30\n",
      "29/29 [==============================] - 285s 10s/step - loss: 0.3193 - accuracy: 0.3966 - val_loss: 0.3171 - val_accuracy: 0.3100\n",
      "Epoch 10/30\n",
      "29/29 [==============================] - 271s 9s/step - loss: 0.3249 - accuracy: 0.4138 - val_loss: 0.3293 - val_accuracy: 0.3100\n",
      "Epoch 11/30\n",
      "29/29 [==============================] - 341s 12s/step - loss: 0.3355 - accuracy: 0.3621 - val_loss: 0.3115 - val_accuracy: 0.3100\n",
      "Epoch 12/30\n",
      "29/29 [==============================] - 414s 14s/step - loss: 0.3302 - accuracy: 0.3793 - val_loss: 0.3262 - val_accuracy: 0.1900\n",
      "Epoch 13/30\n",
      "29/29 [==============================] - 378s 13s/step - loss: 0.3254 - accuracy: 0.3642 - val_loss: 0.3349 - val_accuracy: 0.3100\n",
      "Epoch 14/30\n",
      "29/29 [==============================] - 277s 9s/step - loss: 0.3268 - accuracy: 0.4181 - val_loss: 0.3219 - val_accuracy: 0.3100\n",
      "Epoch 15/30\n",
      "29/29 [==============================] - 279s 10s/step - loss: 0.3106 - accuracy: 0.4159 - val_loss: 0.3248 - val_accuracy: 0.3100\n",
      "Epoch 16/30\n",
      "29/29 [==============================] - 317s 11s/step - loss: 0.3296 - accuracy: 0.4267 - val_loss: 0.3307 - val_accuracy: 0.3100\n",
      "Epoch 17/30\n",
      "29/29 [==============================] - 368s 13s/step - loss: 0.3313 - accuracy: 0.3621 - val_loss: 0.3267 - val_accuracy: 0.3100\n",
      "Epoch 18/30\n",
      "29/29 [==============================] - 348s 12s/step - loss: 0.3145 - accuracy: 0.4181 - val_loss: 0.3198 - val_accuracy: 0.3100\n",
      "Epoch 19/30\n",
      "29/29 [==============================] - 347s 12s/step - loss: 0.3242 - accuracy: 0.3836 - val_loss: 0.3283 - val_accuracy: 0.3100\n",
      "Epoch 20/30\n",
      "29/29 [==============================] - 337s 12s/step - loss: 0.3242 - accuracy: 0.3642 - val_loss: 0.3267 - val_accuracy: 0.3100\n",
      "Epoch 21/30\n",
      "29/29 [==============================] - 365s 13s/step - loss: 0.3202 - accuracy: 0.4138 - val_loss: 0.3141 - val_accuracy: 0.3100\n",
      "Epoch 22/30\n",
      "29/29 [==============================] - 302s 10s/step - loss: 0.3165 - accuracy: 0.3664 - val_loss: 0.3212 - val_accuracy: 0.3100\n",
      "Epoch 23/30\n",
      "29/29 [==============================] - 276s 10s/step - loss: 0.3255 - accuracy: 0.4009 - val_loss: 0.3279 - val_accuracy: 0.3100\n",
      "Epoch 24/30\n",
      "29/29 [==============================] - 268s 9s/step - loss: 0.3222 - accuracy: 0.3642 - val_loss: 0.3273 - val_accuracy: 0.3100\n",
      "Epoch 25/30\n",
      "29/29 [==============================] - 292s 10s/step - loss: 0.3327 - accuracy: 0.3922 - val_loss: 0.3225 - val_accuracy: 0.3100\n",
      "Epoch 26/30\n",
      "29/29 [==============================] - 277s 10s/step - loss: 0.3273 - accuracy: 0.3836 - val_loss: 0.3246 - val_accuracy: 0.3100\n",
      "Epoch 27/30\n",
      "29/29 [==============================] - 270s 9s/step - loss: 0.3241 - accuracy: 0.4009 - val_loss: 0.3215 - val_accuracy: 0.3100\n",
      "Epoch 28/30\n",
      "29/29 [==============================] - 269s 9s/step - loss: 0.3265 - accuracy: 0.3642 - val_loss: 0.3229 - val_accuracy: 0.3100\n",
      "Epoch 29/30\n",
      "29/29 [==============================] - 281s 10s/step - loss: 0.3212 - accuracy: 0.3664 - val_loss: 0.3165 - val_accuracy: 0.3100\n",
      "Epoch 30/30\n",
      "29/29 [==============================] - 359s 12s/step - loss: 0.3154 - accuracy: 0.4052 - val_loss: 0.3224 - val_accuracy: 0.3100\n"
     ]
    }
   ],
   "source": [
    "\n",
    "n_steps = x_train.shape[0] // BATCH_SIZE\n",
    "train_history = model2.fit(\n",
    "    train_dataset,\n",
    "    steps_per_epoch=n_steps,\n",
    "    validation_data=valid_dataset,\n",
    "    epochs=EPOCHS\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "d25cf832",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extract accuracy and loss values from training history\n",
    "accuracy = train_history.history['accuracy']\n",
    "loss = train_history.history['loss']\n",
    "val_accuracy = train_history.history['val_accuracy']\n",
    "val_loss = train_history.history['val_loss']\n",
    "\n",
    "# Plot training and validation accuracy values\n",
    "plt.figure(figsize=(12, 4))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(accuracy, label='Training Accuracy')\n",
    "plt.plot(val_accuracy, label='Validation Accuracy')\n",
    "plt.title('Training and Validation Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "\n",
    "# Plot training and validation loss values\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(loss, label='Training Loss')\n",
    "plt.plot(val_loss, label='Validation Loss')\n",
    "plt.title('Training and Validation Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "# Show the plots\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "f80b5153",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/60\n",
      "6/6 [==============================] - 53s 9s/step - loss: 0.3094 - accuracy: 0.3229\n",
      "Epoch 2/60\n",
      "6/6 [==============================] - 4s 118ms/step - loss: 0.3156 - accuracy: 0.0000e+00\n"
     ]
    }
   ],
   "source": [
    "\n",
    "n_steps = x_valid.shape[0] // BATCH_SIZE\n",
    "train_history_2 = model2.fit(\n",
    "    valid_dataset,\n",
    "    steps_per_epoch=n_steps,\n",
    "    epochs=EPOCHS*2\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8adc94b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_one_hot = y_train_one_hot.reshape(-1, 12)\n",
    "y_valid_one_hot = y_valid_one_hot.reshape(-1, 12)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "1ed039f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "15/15 [==============================] - 117s 4s/stepss: 0.4071 \n",
      "\n",
      "Metrics on the training set (Epoch 1):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 14s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 1):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 437s 14s/step - loss: 0.4071 - accuracy: 0.3276 - val_loss: 0.3375 - val_accuracy: 0.3100\n",
      "Epoch 2/30\n",
      "15/15 [==============================] - 68s 5s/steposs: 0.322\n",
      "\n",
      "Metrics on the training set (Epoch 2):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 15s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 2):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 331s 12s/step - loss: 0.3229 - accuracy: 0.4116 - val_loss: 0.3248 - val_accuracy: 0.3100\n",
      "Epoch 3/30\n",
      "15/15 [==============================] - 66s 4s/steposs: 0.3372\n",
      "\n",
      "Metrics on the training set (Epoch 3):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 14s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 3):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 331s 12s/step - loss: 0.3372 - accuracy: 0.3082 - val_loss: 0.3213 - val_accuracy: 0.3100\n",
      "Epoch 4/30\n",
      "15/15 [==============================] - 67s 4s/steposs: 0.3304\n",
      "\n",
      "Metrics on the training set (Epoch 4):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 15s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 4):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 331s 12s/step - loss: 0.3304 - accuracy: 0.4073 - val_loss: 0.3276 - val_accuracy: 0.3100\n",
      "Epoch 5/30\n",
      "15/15 [==============================] - 67s 4s/steposs: 0.3243\n",
      "\n",
      "Metrics on the training set (Epoch 5):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 14s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 5):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 333s 12s/step - loss: 0.3243 - accuracy: 0.4138 - val_loss: 0.3237 - val_accuracy: 0.3100\n",
      "Epoch 6/30\n",
      "15/15 [==============================] - 67s 4s/steposs: 0.315\n",
      "\n",
      "Metrics on the training set (Epoch 6):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 14s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 6):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 334s 12s/step - loss: 0.3152 - accuracy: 0.3750 - val_loss: 0.3264 - val_accuracy: 0.3100\n",
      "Epoch 7/30\n",
      "15/15 [==============================] - 68s 5s/steposs: 0.318\n",
      "\n",
      "Metrics on the training set (Epoch 7):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 14s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 7):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 334s 12s/step - loss: 0.3182 - accuracy: 0.3750 - val_loss: 0.3134 - val_accuracy: 0.3100\n",
      "Epoch 8/30\n",
      "15/15 [==============================] - 67s 4s/steposs: 0.3394\n",
      "\n",
      "Metrics on the training set (Epoch 8):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 14s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 8):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 341s 12s/step - loss: 0.3394 - accuracy: 0.3728 - val_loss: 0.3232 - val_accuracy: 0.3100\n",
      "Epoch 9/30\n",
      "15/15 [==============================] - 67s 4s/steposs: 0.320\n",
      "\n",
      "Metrics on the training set (Epoch 9):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 14s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 9):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 332s 12s/step - loss: 0.3204 - accuracy: 0.3858 - val_loss: 0.3138 - val_accuracy: 0.3100\n",
      "Epoch 10/30\n",
      "15/15 [==============================] - 86s 6s/steposs: 0.32\n",
      "\n",
      "Metrics on the training set (Epoch 10):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 18s 4s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 10):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 398s 14s/step - loss: 0.3283 - accuracy: 0.3728 - val_loss: 0.3184 - val_accuracy: 0.3100\n",
      "Epoch 11/30\n",
      "15/15 [==============================] - 76s 5s/steposs: 0.332\n",
      "\n",
      "Metrics on the training set (Epoch 11):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 15s 3s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 11):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 387s 13s/step - loss: 0.3325 - accuracy: 0.4009 - val_loss: 0.3224 - val_accuracy: 0.3100\n",
      "Epoch 12/30\n",
      "15/15 [==============================] - 79s 5s/steposs: 0.319\n",
      "\n",
      "Metrics on the training set (Epoch 12):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 18s 4s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 12):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 379s 13s/step - loss: 0.3199 - accuracy: 0.4073 - val_loss: 0.3232 - val_accuracy: 0.3100\n",
      "Epoch 13/30\n",
      "15/15 [==============================] - 113s 7s/stepss: 0\n",
      "\n",
      "Metrics on the training set (Epoch 13):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 22s 6s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 13):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 425s 15s/step - loss: 0.3185 - accuracy: 0.3815 - val_loss: 0.3201 - val_accuracy: 0.3100\n",
      "Epoch 14/30\n",
      "15/15 [==============================] - 94s 6s/steposs: 0.32\n",
      "\n",
      "Metrics on the training set (Epoch 14):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 23s 5s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 14):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 536s 19s/step - loss: 0.3231 - accuracy: 0.4116 - val_loss: 0.3239 - val_accuracy: 0.3100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15/30\n",
      "15/15 [==============================] - 92s 6s/steposs: 0.33\n",
      "\n",
      "Metrics on the training set (Epoch 15):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 19s 4s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 15):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 491s 17s/step - loss: 0.3304 - accuracy: 0.4073 - val_loss: 0.3196 - val_accuracy: 0.3100\n",
      "Epoch 16/30\n",
      "15/15 [==============================] - 90s 6s/steposs: 0.32\n",
      "\n",
      "Metrics on the training set (Epoch 16):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 25s 6s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 16):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 502s 18s/step - loss: 0.3270 - accuracy: 0.3513 - val_loss: 0.3176 - val_accuracy: 0.3100\n",
      "Epoch 17/30\n",
      "15/15 [==============================] - 109s 7s/stepss: 0.3\n",
      "\n",
      "Metrics on the training set (Epoch 17):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 22s 5s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 17):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 464s 16s/step - loss: 0.3199 - accuracy: 0.4073 - val_loss: 0.3260 - val_accuracy: 0.3100\n",
      "Epoch 18/30\n",
      "15/15 [==============================] - 121s 8s/stepss: 0.\n",
      "\n",
      "Metrics on the training set (Epoch 18):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 26s 6s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 18):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 535s 19s/step - loss: 0.3185 - accuracy: 0.4073 - val_loss: 0.3171 - val_accuracy: 0.3100\n",
      "Epoch 19/30\n",
      "15/15 [==============================] - 113s 8s/stepss: 0.\n",
      "\n",
      "Metrics on the training set (Epoch 19):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 25s 6s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 19):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 646s 23s/step - loss: 0.3066 - accuracy: 0.3987 - val_loss: 0.3182 - val_accuracy: 0.3100\n",
      "Epoch 20/30\n",
      "15/15 [==============================] - 168s 11s/steps: \n",
      "\n",
      "Metrics on the training set (Epoch 20):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 35s 8s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 20):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 651s 23s/step - loss: 0.3270 - accuracy: 0.4052 - val_loss: 0.3214 - val_accuracy: 0.3100\n",
      "Epoch 21/30\n",
      "15/15 [==============================] - 93s 6s/steposs: 0.32\n",
      "\n",
      "Metrics on the training set (Epoch 21):\n",
      "Accuracy: 0.8703703703703703\n",
      "Precision: 0.854964559024388\n",
      "Recall: 0.8703703703703703\n",
      "F1 Score: 0.8614960175024878\n",
      "Hamming Loss: 0.12962962962962962\n",
      "4/4 [==============================] - 21s 5s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 21):\n",
      "Accuracy: 0.8625\n",
      "Precision: 0.8481977272727274\n",
      "Recall: 0.8625\n",
      "F1 Score: 0.8547120237187701\n",
      "Hamming Loss: 0.1375\n",
      "29/29 [==============================] - 542s 19s/step - loss: 0.3234 - accuracy: 0.4095 - val_loss: 0.3232 - val_accuracy: 0.3100\n",
      "Epoch 22/30\n",
      "15/15 [==============================] - 90s 6s/steposs: 0.31\n",
      "\n",
      "Metrics on the training set (Epoch 22):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 24s 5s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 22):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 509s 18s/step - loss: 0.3133 - accuracy: 0.4009 - val_loss: 0.3202 - val_accuracy: 0.3100\n",
      "Epoch 23/30\n",
      "15/15 [==============================] - 92s 6s/steposs: 0.32\n",
      "\n",
      "Metrics on the training set (Epoch 23):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 20s 4s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 23):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 458s 16s/step - loss: 0.3229 - accuracy: 0.3987 - val_loss: 0.3209 - val_accuracy: 0.3100\n",
      "Epoch 24/30\n",
      "15/15 [==============================] - 135s 9s/stepss: 0\n",
      "\n",
      "Metrics on the training set (Epoch 24):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 27s 6s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 24):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 647s 23s/step - loss: 0.3226 - accuracy: 0.3836 - val_loss: 0.3155 - val_accuracy: 0.3100\n",
      "Epoch 25/30\n",
      "15/15 [==============================] - 92s 6s/steposs: 0.326\n",
      "\n",
      "Metrics on the training set (Epoch 25):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 21s 5s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 25):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 483s 17s/step - loss: 0.3261 - accuracy: 0.3750 - val_loss: 0.3193 - val_accuracy: 0.3100\n",
      "Epoch 26/30\n",
      "15/15 [==============================] - 95s 6s/steposs: 0.31\n",
      "\n",
      "Metrics on the training set (Epoch 26):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 20s 5s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 26):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 471s 16s/step - loss: 0.3139 - accuracy: 0.3966 - val_loss: 0.3224 - val_accuracy: 0.3100\n",
      "Epoch 27/30\n",
      "15/15 [==============================] - 117s 8s/stepss: 0.\n",
      "\n",
      "Metrics on the training set (Epoch 27):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 23s 5s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 27):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 454s 16s/step - loss: 0.3232 - accuracy: 0.3858 - val_loss: 0.3263 - val_accuracy: 0.3100\n",
      "Epoch 28/30\n",
      "15/15 [==============================] - 103s 7s/stepss: 0.31\n",
      "\n",
      "Metrics on the training set (Epoch 28):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 20s 5s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 28):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 486s 17s/step - loss: 0.3170 - accuracy: 0.4138 - val_loss: 0.3231 - val_accuracy: 0.3100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 29/30\n",
      "15/15 [==============================] - 126s 8s/stepss: 0\n",
      "\n",
      "Metrics on the training set (Epoch 29):\n",
      "Accuracy: 0.8863960113960114\n",
      "Precision: 0.785697889018758\n",
      "Recall: 0.8863960113960114\n",
      "F1 Score: 0.8330147903963271\n",
      "Hamming Loss: 0.1136039886039886\n",
      "4/4 [==============================] - 27s 6s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 29):\n",
      "Accuracy: 0.8925\n",
      "Precision: 0.79655625\n",
      "Recall: 0.8925\n",
      "F1 Score: 0.8418031704095111\n",
      "Hamming Loss: 0.1075\n",
      "29/29 [==============================] - 563s 20s/step - loss: 0.3235 - accuracy: 0.4138 - val_loss: 0.3233 - val_accuracy: 0.3100\n",
      "Epoch 30/30\n",
      "15/15 [==============================] - 122s 8s/stepss: 0.\n",
      "\n",
      "Metrics on the training set (Epoch 30):\n",
      "Accuracy: 0.8703703703703703\n",
      "Precision: 0.854964559024388\n",
      "Recall: 0.8703703703703703\n",
      "F1 Score: 0.8614960175024878\n",
      "Hamming Loss: 0.12962962962962962\n",
      "4/4 [==============================] - 26s 6s/step\n",
      "\n",
      "Metrics on the validation set (Epoch 30):\n",
      "Accuracy: 0.8625\n",
      "Precision: 0.8481977272727274\n",
      "Recall: 0.8625\n",
      "F1 Score: 0.8547120237187701\n",
      "Hamming Loss: 0.1375\n",
      "29/29 [==============================] - 601s 21s/step - loss: 0.3243 - accuracy: 0.4138 - val_loss: 0.3263 - val_accuracy: 0.3100\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x1ccb586ebb0>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, hamming_loss\n",
    "from keras.callbacks import Callback\n",
    "import numpy as np\n",
    "\n",
    "class MetricsCallback(Callback):\n",
    "    def __init__(self, x_train, y_train, x_val, y_val):\n",
    "        self.x_train = x_train\n",
    "        self.y_train = y_train\n",
    "        self.x_val = x_val\n",
    "        self.y_val = y_val\n",
    "\n",
    "    def on_epoch_end(self, epoch, logs=None):\n",
    "        # Predictions on training set\n",
    "        y_train_pred_probs = self.model.predict(self.x_train)\n",
    "        y_train_pred_binary = (y_train_pred_probs > 0.5).astype(int)\n",
    "\n",
    "        y_train_flat = self.y_train.flatten()\n",
    "        y_train_pred_flat = y_train_pred_binary.flatten()\n",
    "\n",
    "        # Compute metrics on training set\n",
    "        accuracy_train = accuracy_score(y_train_flat, y_train_pred_flat)\n",
    "        precision_train = precision_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "        recall_train = recall_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "        f1_train = f1_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "        hamming_loss_train = hamming_loss(y_train_flat, y_train_pred_flat)\n",
    "\n",
    "        print(f\"\\nMetrics on the training set (Epoch {epoch + 1}):\")\n",
    "        print(\"Accuracy:\", accuracy_train)\n",
    "        print(\"Precision:\", precision_train)\n",
    "        print(\"Recall:\", recall_train)\n",
    "        print(\"F1 Score:\", f1_train)\n",
    "        print(\"Hamming Loss:\", hamming_loss_train)\n",
    "\n",
    "        # Predictions on validation set\n",
    "        y_val_pred_probs = self.model.predict(self.x_val)\n",
    "        y_val_pred_binary = (y_val_pred_probs > 0.5).astype(int)\n",
    "\n",
    "        y_val_flat = self.y_val.flatten()\n",
    "        y_val_pred_flat = y_val_pred_binary.flatten()\n",
    "\n",
    "        # Compute metrics on validation set\n",
    "        accuracy_val = accuracy_score(y_val_flat, y_val_pred_flat)\n",
    "        precision_val = precision_score(y_val_flat, y_val_pred_flat, average='weighted')\n",
    "        recall_val = recall_score(y_val_flat, y_val_pred_flat, average='weighted')\n",
    "        f1_val = f1_score(y_val_flat, y_val_pred_flat, average='weighted')\n",
    "        hamming_loss_val = hamming_loss(y_val_flat, y_val_pred_flat)\n",
    "\n",
    "        print(f\"\\nMetrics on the validation set (Epoch {epoch + 1}):\")\n",
    "        print(\"Accuracy:\", accuracy_val)\n",
    "        print(\"Precision:\", precision_val)\n",
    "        print(\"Recall:\", recall_val)\n",
    "        print(\"F1 Score:\", f1_val)\n",
    "        print(\"Hamming Loss:\", hamming_loss_val)\n",
    "\n",
    "# Assuming 'x_train', 'y_train', 'x_valid', 'y_valid' are the training and validation data and labels\n",
    "metrics_callback = MetricsCallback(x_train=x_train, y_train=y_train, x_val=x_valid, y_val=y_valid)\n",
    "\n",
    "# Train the model with the callback\n",
    "model2.fit(train_dataset, steps_per_epoch=n_steps, validation_data=valid_dataset, epochs=EPOCHS, callbacks=[metrics_callback])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "id": "75c59f53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 19s 2s/step - loss: 0.7083 - accuracy: 0.0625\n",
      "Accuracy on validation set: 0.0625\n"
     ]
    }
   ],
   "source": [
    "# Assuming you have validation data in valid_dataset\n",
    "validation_steps = x_valid.shape[0] // BATCH_SIZE\n",
    "validation_history = model2.evaluate(valid_dataset, steps=validation_steps)\n",
    "\n",
    "# Extracting metrics from the validation_history\n",
    "loss, accuracy = validation_history\n",
    "\n",
    "# Print the accuracy\n",
    "print(\"Accuracy on validation set:\", accuracy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "id": "6e58af91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "1/1 [==============================] - 2s 2s/step\n",
      "Shape of y_train_flat: (5616,)\n",
      "Shape of y_train_pred_flat: (5760,)\n",
      "Metrics on the training set:\n",
      "Accuracy: 0.4861111111111111\n",
      "Precision: 0.7626897944934985\n",
      "Recall: 0.4861111111111111\n",
      "F1 Score: 0.5784041598491176\n",
      "Hamming Loss: 0.5138888888888888\n"
     ]
    }
   ],
   "source": [
    "from math import ceil\n",
    "\n",
    "# Assuming you have training data in train_dataset\n",
    "y_train_pred_probs_accumulated = []\n",
    "\n",
    "# Calculate the number of steps for prediction\n",
    "n_steps_train = ceil(len(x_train) / BATCH_SIZE)\n",
    "\n",
    "for data in train_dataset.take(n_steps_train):\n",
    "    # Assuming data is a tuple of features and labels, modify accordingly\n",
    "    features, labels = data\n",
    "    \n",
    "    # Make predictions\n",
    "    y_train_pred_probs = model2.predict(features)\n",
    "    \n",
    "    # Accumulate predictions\n",
    "    y_train_pred_probs_accumulated.append(y_train_pred_probs)\n",
    "\n",
    "# Concatenate accumulated predictions\n",
    "y_train_pred_probs = np.concatenate(y_train_pred_probs_accumulated)\n",
    "\n",
    "# Rest of the code remains the same\n",
    "y_train_pred_binary = (y_train_pred_probs > 0.5).astype(int)\n",
    "\n",
    "# Flatten the arrays\n",
    "y_train_flat = y_train.flatten()\n",
    "y_train_pred_flat = y_train_pred_binary.flatten()\n",
    "\n",
    "# Print the shapes of y_train_flat and y_train_pred_flat\n",
    "print(\"Shape of y_train_flat:\", y_train_flat.shape)\n",
    "print(\"Shape of y_train_pred_flat:\", y_train_pred_flat.shape)\n",
    "\n",
    "# Ensure that y_train_flat and y_train_pred_flat have the same number of samples\n",
    "min_samples = min(y_train_flat.shape[0], y_train_pred_flat.shape[0])\n",
    "y_train_flat = y_train_flat[:min_samples]\n",
    "y_train_pred_flat = y_train_pred_flat[:min_samples]\n",
    "\n",
    "# Now, try calculating metrics again\n",
    "accuracy = accuracy_score(y_train_flat, y_train_pred_flat)\n",
    "precision = precision_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "recall = recall_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "f1 = f1_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "hamming_loss_value = hamming_loss(y_train_flat, y_train_pred_flat)\n",
    "\n",
    "# Print metrics\n",
    "print(\"Metrics on the training set:\")\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"F1 Score:\", f1)\n",
    "print(\"Hamming Loss:\", hamming_loss_value)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "id": "505633d2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of y_train_flat: (5616,)\n",
      "Shape of y_train_pred_flat: (468,)\n",
      "Metrics on the test set:\n",
      "Accuracy: 0.0\n",
      "Precision: 0.0\n",
      "Recall: 0.0\n",
      "F1 Score: 0.0\n",
      "Hamming Loss: 1.0\n"
     ]
    }
   ],
   "source": [
    "# Flatten the arrays\n",
    "#y_train_flat = y_train.reshape(-1, y_train.shape[-1])\n",
    "y_train_flat = y_train.flatten()\n",
    "y_train_pred_flat = y_train_pred_binary.flatten()\n",
    "\n",
    "\n",
    "# Print the shapes of y_train_flat and y_test_pred_flat\n",
    "print(\"Shape of y_train_flat:\", y_train_flat.shape)\n",
    "print(\"Shape of y_train_pred_flat:\", y_train_pred_flat.shape)\n",
    "\n",
    "# Ensure that y_test_flat and y_test_pred_flat have the same number of samples\n",
    "min_samples = min(y_train_flat.shape[0], y_train_pred_flat.shape[0])\n",
    "y_train_flat = y_train_flat[:min_samples]\n",
    "y_train_pred_flat = y_train_pred_flat[:min_samples]\n",
    "\n",
    "# Now, try calculating metrics again\n",
    "accuracy = accuracy_score(y_train_flat, y_train_pred_flat)\n",
    "precision = precision_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "recall = recall_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "f1 = f1_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "hamming_loss_value = hamming_loss(y_train_flat, y_train_pred_flat)\n",
    "\n",
    "# Print metrics\n",
    "print(\"Metrics on the test set:\")\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"F1 Score:\", f1)\n",
    "print(\"Hamming Loss:\", hamming_loss_value)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "id": "2fd81cb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 18s 2s/step\n",
      "Shape of y_valid_flat: (1200,)\n",
      "Shape of y_valid_pred_flat: (1200,)\n",
      "Metrics on the validation set:\n",
      "Accuracy: 0.49416666666666664\n",
      "Precision: 0.7835921052631579\n",
      "Recall: 0.49416666666666664\n",
      "F1 Score: 0.5881611296561224\n",
      "Hamming Loss: 0.5058333333333334\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, hamming_loss\n",
    "\n",
    "\n",
    "# Assuming you have predictions for the validation set stored in y_valid_pred_probs\n",
    "y_valid_pred_probs = model2.predict(valid_dataset)\n",
    "y_valid_pred_binary = (y_valid_pred_probs > 0.5).astype(int)\n",
    "\n",
    "y_valid_flat = y_valid.flatten()\n",
    "y_valid_pred_flat = y_valid_pred_binary.flatten()\n",
    "\n",
    "# Print the shapes of y_valid_flat and y_valid_pred_flat\n",
    "print(\"Shape of y_valid_flat:\", y_valid_flat.shape)\n",
    "print(\"Shape of y_valid_pred_flat:\", y_valid_pred_flat.shape)\n",
    "\n",
    "# Ensure that y_valid_flat and y_valid_pred_flat have the same number of samples\n",
    "min_samples = min(y_valid_flat.shape[0], y_valid_pred_flat.shape[0])\n",
    "y_valid_flat = y_valid_flat[:min_samples]\n",
    "y_valid_pred_flat = y_valid_pred_flat[:min_samples]\n",
    "\n",
    "# Now, try calculating metrics again\n",
    "accuracy = accuracy_score(y_valid_flat, y_valid_pred_flat)\n",
    "precision = precision_score(y_valid_flat, y_valid_pred_flat, average='weighted')\n",
    "recall = recall_score(y_valid_flat, y_valid_pred_flat, average='weighted')\n",
    "f1 = f1_score(y_valid_flat, y_valid_pred_flat, average='weighted')\n",
    "hamming_loss_value = hamming_loss(y_valid_flat, y_valid_pred_flat)\n",
    "\n",
    "# Print metrics\n",
    "print(\"Metrics on the validation set:\")\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"F1 Score:\", f1)\n",
    "print(\"Hamming Loss:\", hamming_loss_value)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "id": "9a6a9530",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of y_test_flat: (2412,)\n",
      "Shape of y_test_pred_flat: (1212,)\n",
      "Metrics on the test set:\n",
      "Accuracy: 0.8844884488448845\n",
      "Precision: 0.7823198161400299\n",
      "Recall: 0.8844884488448845\n",
      "F1 Score: 0.8302728696687534\n",
      "Hamming Loss: 0.11551155115511551\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, hamming_loss\n",
    "\n",
    "# Flatten the arrays\n",
    "y_test_flat = y_test.flatten()\n",
    "y_test_pred_flat = y_test_pred_binary.flatten()\n",
    "# Print the shapes of y_test_flat and y_test_pred_flat\n",
    "print(\"Shape of y_test_flat:\", y_test_flat.shape)\n",
    "print(\"Shape of y_test_pred_flat:\", y_test_pred_flat.shape)\n",
    "\n",
    "# Ensure that y_test_flat and y_test_pred_flat have the same number of samples\n",
    "min_samples = min(y_test_flat.shape[0], y_test_pred_flat.shape[0])\n",
    "y_test_flat = y_test_flat[:min_samples]\n",
    "y_test_pred_flat = y_test_pred_flat[:min_samples]\n",
    "\n",
    "# Now, try calculating metrics again\n",
    "accuracy = accuracy_score(y_test_flat, y_test_pred_flat)\n",
    "precision = precision_score(y_test_flat, y_test_pred_flat, average='weighted')\n",
    "recall = recall_score(y_test_flat, y_test_pred_flat, average='weighted')\n",
    "f1 = f1_score(y_test_flat, y_test_pred_flat, average='weighted')\n",
    "hamming_loss_value = hamming_loss(y_test_flat, y_test_pred_flat)\n",
    "\n",
    "# Print metrics\n",
    "print(\"Metrics on the test set:\")\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"F1 Score:\", f1)\n",
    "print(\"Hamming Loss:\", hamming_loss_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa3afb3a",
   "metadata": {},
   "source": [
    "## 3. LSTM \n",
    "\n",
    "LSTM with Keras Tokenization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "004599ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 400000 word vectors.\n",
      "WARNING:tensorflow:From C:\\Users\\user\\AppData\\Roaming\\Python\\Python39\\site-packages\\keras\\src\\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\user\\AppData\\Roaming\\Python\\Python39\\site-packages\\keras\\src\\optimizers\\__init__.py:309: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n",
      "Epoch 1/30\n",
      "WARNING:tensorflow:From C:\\Users\\user\\AppData\\Roaming\\Python\\Python39\\site-packages\\keras\\src\\utils\\tf_utils.py:492: The name tf.ragged.RaggedTensorValue is deprecated. Please use tf.compat.v1.ragged.RaggedTensorValue instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\user\\AppData\\Roaming\\Python\\Python39\\site-packages\\keras\\src\\engine\\base_layer_utils.py:384: The name tf.executing_eagerly_outside_functions is deprecated. Please use tf.compat.v1.executing_eagerly_outside_functions instead.\n",
      "\n",
      "14/14 [==============================] - 3s 102ms/step - loss: 0.4938 - accuracy: 0.1568 - val_loss: 0.3597 - val_accuracy: 0.4043\n",
      "Epoch 2/30\n",
      "14/14 [==============================] - 1s 64ms/step - loss: 0.3223 - accuracy: 0.3919 - val_loss: 0.3446 - val_accuracy: 0.4043\n",
      "Epoch 3/30\n",
      "14/14 [==============================] - 1s 64ms/step - loss: 0.3092 - accuracy: 0.3919 - val_loss: 0.3388 - val_accuracy: 0.4043\n",
      "Epoch 4/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.3054 - accuracy: 0.3919 - val_loss: 0.3399 - val_accuracy: 0.4043\n",
      "Epoch 5/30\n",
      "14/14 [==============================] - 1s 65ms/step - loss: 0.2991 - accuracy: 0.3919 - val_loss: 0.3323 - val_accuracy: 0.4043\n",
      "Epoch 6/30\n",
      "14/14 [==============================] - 1s 65ms/step - loss: 0.2951 - accuracy: 0.3919 - val_loss: 0.3279 - val_accuracy: 0.4043\n",
      "Epoch 7/30\n",
      "14/14 [==============================] - 1s 65ms/step - loss: 0.2877 - accuracy: 0.3943 - val_loss: 0.3256 - val_accuracy: 0.4255\n",
      "Epoch 8/30\n",
      "14/14 [==============================] - 1s 65ms/step - loss: 0.2782 - accuracy: 0.4371 - val_loss: 0.3187 - val_accuracy: 0.3830\n",
      "Epoch 9/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.2694 - accuracy: 0.4347 - val_loss: 0.3061 - val_accuracy: 0.4255\n",
      "Epoch 10/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.2578 - accuracy: 0.4537 - val_loss: 0.2990 - val_accuracy: 0.4468\n",
      "Epoch 11/30\n",
      "14/14 [==============================] - 1s 70ms/step - loss: 0.2460 - accuracy: 0.4774 - val_loss: 0.2853 - val_accuracy: 0.4468\n",
      "Epoch 12/30\n",
      "14/14 [==============================] - 1s 65ms/step - loss: 0.2359 - accuracy: 0.4893 - val_loss: 0.2955 - val_accuracy: 0.4468\n",
      "Epoch 13/30\n",
      "14/14 [==============================] - 1s 65ms/step - loss: 0.2251 - accuracy: 0.5107 - val_loss: 0.2761 - val_accuracy: 0.4468\n",
      "Epoch 14/30\n",
      "14/14 [==============================] - 1s 67ms/step - loss: 0.2112 - accuracy: 0.5273 - val_loss: 0.2696 - val_accuracy: 0.5106\n",
      "Epoch 15/30\n",
      "14/14 [==============================] - 1s 70ms/step - loss: 0.2022 - accuracy: 0.5392 - val_loss: 0.2696 - val_accuracy: 0.5106\n",
      "Epoch 16/30\n",
      "14/14 [==============================] - 1s 70ms/step - loss: 0.1907 - accuracy: 0.5891 - val_loss: 0.2575 - val_accuracy: 0.4681\n",
      "Epoch 17/30\n",
      "14/14 [==============================] - 1s 69ms/step - loss: 0.1837 - accuracy: 0.5962 - val_loss: 0.2654 - val_accuracy: 0.5319\n",
      "Epoch 18/30\n",
      "14/14 [==============================] - 1s 71ms/step - loss: 0.1728 - accuracy: 0.6342 - val_loss: 0.2673 - val_accuracy: 0.5106\n",
      "Epoch 19/30\n",
      "14/14 [==============================] - 1s 67ms/step - loss: 0.1640 - accuracy: 0.6675 - val_loss: 0.2435 - val_accuracy: 0.5106\n",
      "Epoch 20/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.1652 - accuracy: 0.6318 - val_loss: 0.2409 - val_accuracy: 0.5319\n",
      "Epoch 21/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.1528 - accuracy: 0.6603 - val_loss: 0.2415 - val_accuracy: 0.4681\n",
      "Epoch 22/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.1417 - accuracy: 0.6793 - val_loss: 0.2352 - val_accuracy: 0.5106\n",
      "Epoch 23/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.1350 - accuracy: 0.6817 - val_loss: 0.2318 - val_accuracy: 0.5106\n",
      "Epoch 24/30\n",
      "14/14 [==============================] - 1s 71ms/step - loss: 0.1270 - accuracy: 0.6865 - val_loss: 0.2277 - val_accuracy: 0.4894\n",
      "Epoch 25/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.1219 - accuracy: 0.6960 - val_loss: 0.2267 - val_accuracy: 0.5106\n",
      "Epoch 26/30\n",
      "14/14 [==============================] - 1s 67ms/step - loss: 0.1225 - accuracy: 0.7150 - val_loss: 0.2388 - val_accuracy: 0.4681\n",
      "Epoch 27/30\n",
      "14/14 [==============================] - 1s 67ms/step - loss: 0.1153 - accuracy: 0.7102 - val_loss: 0.2396 - val_accuracy: 0.4894\n",
      "Epoch 28/30\n",
      "14/14 [==============================] - 1s 66ms/step - loss: 0.1066 - accuracy: 0.7340 - val_loss: 0.2243 - val_accuracy: 0.5106\n",
      "Epoch 29/30\n",
      "14/14 [==============================] - 1s 67ms/step - loss: 0.1026 - accuracy: 0.7482 - val_loss: 0.2213 - val_accuracy: 0.5106\n",
      "Epoch 30/30\n",
      "14/14 [==============================] - 1s 71ms/step - loss: 0.0949 - accuracy: 0.7458 - val_loss: 0.2150 - val_accuracy: 0.4681\n"
     ]
    }
   ],
   "source": [
    "#---------------OLD CODE---------------------------#\n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Embedding, LSTM, Dense\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, hamming_loss\n",
    "\n",
    "# Assuming 'data' is your entire dataset and 'trans' is the column containing text data\n",
    "all_text = data['trans'].values\n",
    "\n",
    "# Keras Tokenization\n",
    "tokenizer = Tokenizer(num_words=None)\n",
    "tokenizer.fit_on_texts(train['trans'])\n",
    "max_len = 150\n",
    "\n",
    "train_sequences = tokenizer.texts_to_sequences(train['trans'])\n",
    "test_sequences = tokenizer.texts_to_sequences(test['trans'])\n",
    "\n",
    "train_padded = pad_sequences(train_sequences, maxlen=max_len)\n",
    "test_padded = pad_sequences(test_sequences, maxlen=max_len)\n",
    "\n",
    "word_index = tokenizer.word_index\n",
    "\n",
    "# 'surah', 'verse', 'trans' are the columns to be dropped as labels\n",
    "y_train = train.drop(labels=['surah', 'verse', 'trans'], axis=1)\n",
    "y_test = test.drop(labels=['surah', 'verse', 'trans'], axis=1)\n",
    "\n",
    "# Load GloVe vectors into a dictionary\n",
    "glove_file_path = 'C:/Users/user/Desktop/MASTER/P1/ipynb/glove.6B/glove.6B.100d.txt'\n",
    "embeddings_index = {}\n",
    "\n",
    "with open(glove_file_path, encoding='utf-8') as glove_file:\n",
    "    for line in glove_file:\n",
    "        values = line.split(' ')\n",
    "        word = values[0]\n",
    "        coefs = np.asarray([float(val) for val in values[1:]])\n",
    "        embeddings_index[word] = coefs\n",
    "\n",
    "print('Found %s word vectors.' % len(embeddings_index))\n",
    "\n",
    "# Create an embedding matrix for the words in the vocabulary\n",
    "vocab_size = len(word_index) + 1\n",
    "embedding_matrix = np.zeros((vocab_size, 100))  # Assuming 100-dimensional embeddings\n",
    "\n",
    "for word, i in word_index.items():\n",
    "    embedding_vector = embeddings_index.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[i] = embedding_vector\n",
    "\n",
    "# Build LSTM Model with Embedding Layer\n",
    "model = Sequential()\n",
    "model.add(Embedding(vocab_size, 100, weights=[embedding_matrix], input_length=max_len, trainable=False))\n",
    "model.add(LSTM(100))\n",
    "model.add(Dense(12, activation='sigmoid'))  # Adjust 'number_of_classes' based on your problem\n",
    "\n",
    "# Compile the model (choose appropriate loss and optimizer)\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "history2 = model.fit(train_padded, y_train, epochs=30, batch_size=32, validation_split=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "5d40da62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot training history for accuracy\n",
    "plt.plot(history2.history['accuracy'], label='Training Accuracy')\n",
    "plt.plot(history2.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.title('Model Training Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Plot training history for loss\n",
    "plt.plot(history2.history['loss'], label='Training Loss')\n",
    "plt.plot(history2.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Training Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "1b6c0a39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 400000 word vectors.\n",
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       (None, 150, 100)          178600    \n",
      "                                                                 \n",
      " lstm (LSTM)                 (None, 100)               80400     \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 12)                1212      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 260212 (1016.45 KB)\n",
      "Trainable params: 81612 (318.80 KB)\n",
      "Non-trainable params: 178600 (697.66 KB)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.callbacks import Callback\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, hamming_loss\n",
    "import numpy as np\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Embedding, LSTM, Dense\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, hamming_loss\n",
    "\n",
    "# Keras Tokenization\n",
    "tokenizer = Tokenizer(num_words=None)\n",
    "tokenizer.fit_on_texts(train['trans'])\n",
    "max_len = 150\n",
    "\n",
    "train_sequences = tokenizer.texts_to_sequences(train['trans'])\n",
    "test_sequences = tokenizer.texts_to_sequences(test['trans'])\n",
    "\n",
    "train_padded = pad_sequences(train_sequences, maxlen=max_len)\n",
    "test_padded = pad_sequences(test_sequences, maxlen=max_len)\n",
    "\n",
    "word_index = tokenizer.word_index\n",
    "\n",
    "# 'surah', 'verse', 'trans' are the columns to be dropped as labels\n",
    "y_train = train.drop(labels=['surah', 'verse', 'trans'], axis=1)\n",
    "y_test = test.drop(labels=['surah', 'verse', 'trans'], axis=1)\n",
    "\n",
    "# Load GloVe vectors into a dictionary\n",
    "glove_file_path = 'C:/Users/user/Desktop/MASTER/P1/ipynb/glove.6B/glove.6B.100d.txt'\n",
    "embeddings_index = {}\n",
    "\n",
    "with open(glove_file_path, encoding='utf-8') as glove_file:\n",
    "    for line in glove_file:\n",
    "        values = line.split(' ')\n",
    "        word = values[0]\n",
    "        coefs = np.asarray([float(val) for val in values[1:]])\n",
    "        embeddings_index[word] = coefs\n",
    "\n",
    "print('Found %s word vectors.' % len(embeddings_index))\n",
    "\n",
    "# Create an embedding matrix for the words in the vocabulary\n",
    "vocab_size = len(word_index) + 1\n",
    "embedding_matrix = np.zeros((vocab_size, 100))\n",
    "\n",
    "for word, i in word_index.items():\n",
    "    embedding_vector = embeddings_index.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[i] = embedding_vector\n",
    "\n",
    "# Build LSTM Model with Embedding Layer\n",
    "model = Sequential()\n",
    "model.add(Embedding(vocab_size, 100, weights=[embedding_matrix], input_length=max_len, trainable=False))\n",
    "model.add(LSTM(100))\n",
    "model.add(Dense(12, activation='sigmoid')) \n",
    "\n",
    "# Compile the model (choose appropriate loss and optimizer)\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "9a54bf46",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 400000 word vectors.\n",
      "Epoch 1/30\n",
      "14/14 [==============================] - 8s 230ms/step - loss: 0.5360 - accuracy: 0.2779 - val_loss: 0.3789 - val_accuracy: 0.4043\n",
      "Epoch 2/30\n",
      "14/14 [==============================] - 2s 108ms/step - loss: 0.3283 - accuracy: 0.3919 - val_loss: 0.3426 - val_accuracy: 0.4043\n",
      "Epoch 3/30\n",
      "14/14 [==============================] - 2s 117ms/step - loss: 0.3115 - accuracy: 0.3919 - val_loss: 0.3427 - val_accuracy: 0.4043\n",
      "Epoch 4/30\n",
      "14/14 [==============================] - 2s 112ms/step - loss: 0.3070 - accuracy: 0.3919 - val_loss: 0.3405 - val_accuracy: 0.4043\n",
      "Epoch 5/30\n",
      "14/14 [==============================] - 2s 110ms/step - loss: 0.3020 - accuracy: 0.3919 - val_loss: 0.3363 - val_accuracy: 0.4043\n",
      "Epoch 6/30\n",
      "14/14 [==============================] - 2s 117ms/step - loss: 0.2978 - accuracy: 0.3919 - val_loss: 0.3312 - val_accuracy: 0.4043\n",
      "Epoch 7/30\n",
      "14/14 [==============================] - 1s 107ms/step - loss: 0.2944 - accuracy: 0.3943 - val_loss: 0.3330 - val_accuracy: 0.3830\n",
      "Epoch 8/30\n",
      "14/14 [==============================] - 1s 106ms/step - loss: 0.2878 - accuracy: 0.3967 - val_loss: 0.3266 - val_accuracy: 0.4255\n",
      "Epoch 9/30\n",
      "14/14 [==============================] - 1s 98ms/step - loss: 0.2815 - accuracy: 0.3990 - val_loss: 0.3213 - val_accuracy: 0.4255\n",
      "Epoch 10/30\n",
      "14/14 [==============================] - 1s 97ms/step - loss: 0.2761 - accuracy: 0.4109 - val_loss: 0.3281 - val_accuracy: 0.4468\n",
      "Epoch 11/30\n",
      "14/14 [==============================] - 1s 86ms/step - loss: 0.2729 - accuracy: 0.4157 - val_loss: 0.3199 - val_accuracy: 0.4043\n",
      "Epoch 12/30\n",
      "14/14 [==============================] - 1s 109ms/step - loss: 0.2715 - accuracy: 0.4442 - val_loss: 0.3184 - val_accuracy: 0.4468\n",
      "Epoch 13/30\n",
      "14/14 [==============================] - 2s 116ms/step - loss: 0.2626 - accuracy: 0.4371 - val_loss: 0.3131 - val_accuracy: 0.4468\n",
      "Epoch 14/30\n",
      "14/14 [==============================] - 2s 119ms/step - loss: 0.2600 - accuracy: 0.4418 - val_loss: 0.3118 - val_accuracy: 0.4255\n",
      "Epoch 15/30\n",
      "14/14 [==============================] - 2s 118ms/step - loss: 0.2498 - accuracy: 0.4418 - val_loss: 0.3126 - val_accuracy: 0.4255\n",
      "Epoch 16/30\n",
      "14/14 [==============================] - 2s 114ms/step - loss: 0.2489 - accuracy: 0.4561 - val_loss: 0.3083 - val_accuracy: 0.4255\n",
      "Epoch 17/30\n",
      "14/14 [==============================] - 2s 118ms/step - loss: 0.2439 - accuracy: 0.4442 - val_loss: 0.2991 - val_accuracy: 0.4043\n",
      "Epoch 18/30\n",
      "14/14 [==============================] - 2s 121ms/step - loss: 0.2357 - accuracy: 0.4917 - val_loss: 0.3038 - val_accuracy: 0.4468\n",
      "Epoch 19/30\n",
      "14/14 [==============================] - 1s 87ms/step - loss: 0.2278 - accuracy: 0.4822 - val_loss: 0.2974 - val_accuracy: 0.3830\n",
      "Epoch 20/30\n",
      "14/14 [==============================] - 1s 84ms/step - loss: 0.2205 - accuracy: 0.4988 - val_loss: 0.3150 - val_accuracy: 0.3617\n",
      "Epoch 21/30\n",
      "14/14 [==============================] - 1s 96ms/step - loss: 0.2140 - accuracy: 0.5154 - val_loss: 0.2869 - val_accuracy: 0.4255\n",
      "Epoch 22/30\n",
      "14/14 [==============================] - 2s 116ms/step - loss: 0.2088 - accuracy: 0.5297 - val_loss: 0.2803 - val_accuracy: 0.4681\n",
      "Epoch 23/30\n",
      "14/14 [==============================] - 2s 116ms/step - loss: 0.1990 - accuracy: 0.5748 - val_loss: 0.2823 - val_accuracy: 0.5106\n",
      "Epoch 24/30\n",
      "14/14 [==============================] - 2s 119ms/step - loss: 0.1990 - accuracy: 0.5487 - val_loss: 0.2936 - val_accuracy: 0.4043\n",
      "Epoch 25/30\n",
      "14/14 [==============================] - 2s 114ms/step - loss: 0.1972 - accuracy: 0.5534 - val_loss: 0.2722 - val_accuracy: 0.5106\n",
      "Epoch 26/30\n",
      "14/14 [==============================] - 2s 113ms/step - loss: 0.1873 - accuracy: 0.5748 - val_loss: 0.2758 - val_accuracy: 0.4255\n",
      "Epoch 27/30\n",
      "14/14 [==============================] - 2s 110ms/step - loss: 0.1804 - accuracy: 0.5796 - val_loss: 0.2835 - val_accuracy: 0.5106\n",
      "Epoch 28/30\n",
      "14/14 [==============================] - 2s 112ms/step - loss: 0.1746 - accuracy: 0.5891 - val_loss: 0.2717 - val_accuracy: 0.4681\n",
      "Epoch 29/30\n",
      "14/14 [==============================] - 2s 109ms/step - loss: 0.1650 - accuracy: 0.6033 - val_loss: 0.2795 - val_accuracy: 0.3830\n",
      "Epoch 30/30\n",
      "14/14 [==============================] - 1s 85ms/step - loss: 0.1654 - accuracy: 0.6390 - val_loss: 0.2584 - val_accuracy: 0.4043\n",
      "15/15 [==============================] - 1s 38ms/step\n",
      "\n",
      "Metrics on the training set:\n",
      "Accuracy: 0.9405270655270656\n",
      "Precision: 0.9399253582323434\n",
      "Recall: 0.9405270655270656\n",
      "F1 Score: 0.9328385250630399\n",
      "Hamming Loss: 0.059472934472934474\n"
     ]
    }
   ],
   "source": [
    "\n",
    "class MetricsCallback(Callback):\n",
    "    def __init__(self, x_train, y_train):\n",
    "        self.x_train = x_train\n",
    "        self.y_train = y_train\n",
    "\n",
    "    def on_train_end(self, logs=None):\n",
    "        y_train_pred_probs = self.model.predict(self.x_train)\n",
    "        y_train_pred_binary = (y_train_pred_probs > 0.5).astype(int)\n",
    "\n",
    "        # Convert DataFrame to NumPy array before flattening\n",
    "        y_train_flat = self.y_train.to_numpy().flatten()\n",
    "        y_train_pred_flat = y_train_pred_binary.flatten()\n",
    "\n",
    "        accuracy = accuracy_score(y_train_flat, y_train_pred_flat)\n",
    "        precision = precision_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "        recall = recall_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "        f1 = f1_score(y_train_flat, y_train_pred_flat, average='weighted')\n",
    "        hamming_loss_value = hamming_loss(y_train_flat, y_train_pred_flat)\n",
    "\n",
    "        print(\"\\nMetrics on the training set:\")\n",
    "        print(\"Accuracy:\", accuracy)\n",
    "        print(\"Precision:\", precision)\n",
    "        print(\"Recall:\", recall)\n",
    "        print(\"F1 Score:\", f1)\n",
    "        print(\"Hamming Loss:\", hamming_loss_value)\n",
    "\n",
    "\n",
    "# Assuming 'x_train' and 'y_train' are the training data and labels\n",
    "metrics_callback = MetricsCallback(x_train=train_padded, y_train=y_train)\n",
    "\n",
    "# Train the model with the callback\n",
    "history2 = model.fit(train_padded, y_train, epochs=30, batch_size=32, validation_split=0.1, callbacks=[metrics_callback])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "5151b1a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys([])\n"
     ]
    }
   ],
   "source": [
    "print(history2.history.keys())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f427b5c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 400000 word vectors.\n",
      "Epoch 1/30\n",
      "14/14 [==============================] - 1s 29ms/stepss: 0.4943 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 1):\n",
      "Accuracy: 0.8867775138558986\n",
      "Precision: 0.7863743590804486\n",
      "Recall: 0.8867775138558986\n",
      "F1 Score: 0.8335634204940046\n",
      "Hamming Loss: 0.11322248614410134\n",
      "2/2 [==============================] - 0s 19ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 1):\n",
      "Accuracy: 0.8829787234042553\n",
      "Precision: 0.7796514259846085\n",
      "Recall: 0.8829787234042553\n",
      "F1 Score: 0.8281043394638778\n",
      "Hamming Loss: 0.11702127659574468\n",
      "14/14 [==============================] - 5s 197ms/step - loss: 0.4926 - accuracy: 0.3349 - val_loss: 0.3300 - val_accuracy: 0.4468\n",
      "Epoch 2/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.3204 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 2):\n",
      "Accuracy: 0.8867775138558986\n",
      "Precision: 0.7863743590804486\n",
      "Recall: 0.8867775138558986\n",
      "F1 Score: 0.8335634204940046\n",
      "Hamming Loss: 0.11322248614410134\n",
      "2/2 [==============================] - 0s 22ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 2):\n",
      "Accuracy: 0.8829787234042553\n",
      "Precision: 0.7796514259846085\n",
      "Recall: 0.8829787234042553\n",
      "F1 Score: 0.8281043394638778\n",
      "Hamming Loss: 0.11702127659574468\n",
      "14/14 [==============================] - 2s 125ms/step - loss: 0.3198 - accuracy: 0.3872 - val_loss: 0.3152 - val_accuracy: 0.4468\n",
      "Epoch 3/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.3114 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 3):\n",
      "Accuracy: 0.8879651623119557\n",
      "Precision: 0.9005318920248834\n",
      "Recall: 0.8879651623119557\n",
      "F1 Score: 0.8364390845440927\n",
      "Hamming Loss: 0.11203483768804434\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 3):\n",
      "Accuracy: 0.8829787234042553\n",
      "Precision: 0.7796514259846085\n",
      "Recall: 0.8829787234042553\n",
      "F1 Score: 0.8281043394638778\n",
      "Hamming Loss: 0.11702127659574468\n",
      "14/14 [==============================] - 2s 123ms/step - loss: 0.3123 - accuracy: 0.3872 - val_loss: 0.3174 - val_accuracy: 0.4468\n",
      "Epoch 4/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.3086 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 4):\n",
      "Accuracy: 0.8895486935866983\n",
      "Precision: 0.9017820856030982\n",
      "Recall: 0.8895486935866983\n",
      "F1 Score: 0.8401994547780809\n",
      "Hamming Loss: 0.11045130641330166\n",
      "2/2 [==============================] - 0s 22ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 4):\n",
      "Accuracy: 0.8829787234042553\n",
      "Precision: 0.7796514259846085\n",
      "Recall: 0.8829787234042553\n",
      "F1 Score: 0.8281043394638778\n",
      "Hamming Loss: 0.11702127659574468\n",
      "14/14 [==============================] - 2s 125ms/step - loss: 0.3088 - accuracy: 0.3872 - val_loss: 0.3133 - val_accuracy: 0.4468\n",
      "Epoch 5/30\n",
      "14/14 [==============================] - 0s 28ms/stepss: 0.3016 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 5):\n",
      "Accuracy: 0.8927157561361837\n",
      "Precision: 0.9008947385438452\n",
      "Recall: 0.8927157561361837\n",
      "F1 Score: 0.8478066987954068\n",
      "Hamming Loss: 0.10728424386381631\n",
      "2/2 [==============================] - 0s 21ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 5):\n",
      "Accuracy: 0.8865248226950354\n",
      "Precision: 0.8994472628151738\n",
      "Recall: 0.8865248226950354\n",
      "F1 Score: 0.8365504049873663\n",
      "Hamming Loss: 0.11347517730496454\n",
      "14/14 [==============================] - 2s 119ms/step - loss: 0.3028 - accuracy: 0.3872 - val_loss: 0.3109 - val_accuracy: 0.4468\n",
      "Epoch 6/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.2988 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 6):\n",
      "Accuracy: 0.8952889944576405\n",
      "Precision: 0.8868405737965485\n",
      "Recall: 0.8952889944576405\n",
      "F1 Score: 0.8569879600388333\n",
      "Hamming Loss: 0.10471100554235946\n",
      "2/2 [==============================] - 0s 21ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 6):\n",
      "Accuracy: 0.8900709219858156\n",
      "Precision: 0.8754592071024032\n",
      "Recall: 0.8900709219858156\n",
      "F1 Score: 0.850015221729865\n",
      "Hamming Loss: 0.1099290780141844\n",
      "14/14 [==============================] - 2s 122ms/step - loss: 0.2991 - accuracy: 0.3895 - val_loss: 0.3095 - val_accuracy: 0.4468\n",
      "Epoch 7/30\n",
      "14/14 [==============================] - 0s 28ms/stepss: 0.2963 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 7):\n",
      "Accuracy: 0.8944972288202692\n",
      "Precision: 0.9007272776905602\n",
      "Recall: 0.8944972288202692\n",
      "F1 Score: 0.852063284177779\n",
      "Hamming Loss: 0.1055027711797308\n",
      "2/2 [==============================] - 0s 21ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 7):\n",
      "Accuracy: 0.8882978723404256\n",
      "Precision: 0.9008419615428376\n",
      "Recall: 0.8882978723404256\n",
      "F1 Score: 0.8406260072904901\n",
      "Hamming Loss: 0.11170212765957446\n",
      "14/14 [==============================] - 2s 118ms/step - loss: 0.2962 - accuracy: 0.3990 - val_loss: 0.3057 - val_accuracy: 0.4468\n",
      "Epoch 8/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.2902 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 8):\n",
      "Accuracy: 0.8917260490894695\n",
      "Precision: 0.8655999548451752\n",
      "Recall: 0.8917260490894695\n",
      "F1 Score: 0.8650398923882658\n",
      "Hamming Loss: 0.10827395091053048\n",
      "2/2 [==============================] - 0s 19ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 8):\n",
      "Accuracy: 0.8900709219858156\n",
      "Precision: 0.8655428660826033\n",
      "Recall: 0.8900709219858156\n",
      "F1 Score: 0.8630977424186161\n",
      "Hamming Loss: 0.1099290780141844\n",
      "14/14 [==============================] - 2s 122ms/step - loss: 0.2898 - accuracy: 0.4299 - val_loss: 0.3052 - val_accuracy: 0.4468\n",
      "Epoch 9/30\n",
      "14/14 [==============================] - 0s 32ms/stepss: 0.2858 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 9):\n",
      "Accuracy: 0.8968725257323832\n",
      "Precision: 0.8990390040832373\n",
      "Recall: 0.8968725257323832\n",
      "F1 Score: 0.8580289021872944\n",
      "Hamming Loss: 0.10312747426761679\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 9):\n",
      "Accuracy: 0.8918439716312057\n",
      "Precision: 0.8881682700965332\n",
      "Recall: 0.8918439716312057\n",
      "F1 Score: 0.8511613515466039\n",
      "Hamming Loss: 0.10815602836879433\n",
      "14/14 [==============================] - 2s 130ms/step - loss: 0.2855 - accuracy: 0.4347 - val_loss: 0.3014 - val_accuracy: 0.4681\n",
      "Epoch 10/30\n",
      "14/14 [==============================] - 0s 28ms/stepss: 0.2771 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 10):\n",
      "Accuracy: 0.8972684085510689\n",
      "Precision: 0.8818252311041043\n",
      "Recall: 0.8972684085510689\n",
      "F1 Score: 0.8655920568262567\n",
      "Hamming Loss: 0.10273159144893111\n",
      "2/2 [==============================] - 0s 23ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 10):\n",
      "Accuracy: 0.900709219858156\n",
      "Precision: 0.8926609333747476\n",
      "Recall: 0.900709219858156\n",
      "F1 Score: 0.8728107471465667\n",
      "Hamming Loss: 0.09929078014184398\n",
      "14/14 [==============================] - 2s 122ms/step - loss: 0.2764 - accuracy: 0.4466 - val_loss: 0.2962 - val_accuracy: 0.4468\n",
      "Epoch 11/30\n",
      "14/14 [==============================] - 0s 33ms/stepss: 0.2743 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 11):\n",
      "Accuracy: 0.9014251781472684\n",
      "Precision: 0.9014976363630307\n",
      "Recall: 0.9014251781472684\n",
      "F1 Score: 0.868301864004187\n",
      "Hamming Loss: 0.09857482185273159\n",
      "2/2 [==============================] - 0s 23ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 11):\n",
      "Accuracy: 0.898936170212766\n",
      "Precision: 0.8999461352006464\n",
      "Recall: 0.898936170212766\n",
      "F1 Score: 0.8654863366485531\n",
      "Hamming Loss: 0.10106382978723404\n",
      "14/14 [==============================] - 2s 141ms/step - loss: 0.2743 - accuracy: 0.4252 - val_loss: 0.2941 - val_accuracy: 0.4468\n",
      "Epoch 12/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.2715 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 12):\n",
      "Accuracy: 0.899643705463183\n",
      "Precision: 0.8988488033989769\n",
      "Recall: 0.899643705463183\n",
      "F1 Score: 0.8647792574879407\n",
      "Hamming Loss: 0.1003562945368171\n",
      "2/2 [==============================] - 0s 19ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 12):\n",
      "Accuracy: 0.8971631205673759\n",
      "Precision: 0.8974498809432367\n",
      "Recall: 0.8971631205673759\n",
      "F1 Score: 0.8620129524523226\n",
      "Hamming Loss: 0.10283687943262411\n",
      "14/14 [==============================] - 2s 129ms/step - loss: 0.2708 - accuracy: 0.4347 - val_loss: 0.2934 - val_accuracy: 0.4043\n",
      "Epoch 13/30\n",
      "14/14 [==============================] - 0s 31ms/stepss: 0.2612 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 13):\n",
      "Accuracy: 0.9036025336500396\n",
      "Precision: 0.8988133120383834\n",
      "Recall: 0.9036025336500396\n",
      "F1 Score: 0.8745449148409147\n",
      "Hamming Loss: 0.09639746634996041\n",
      "2/2 [==============================] - 0s 19ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 13):\n",
      "Accuracy: 0.900709219858156\n",
      "Precision: 0.896590218292346\n",
      "Recall: 0.900709219858156\n",
      "F1 Score: 0.8709030371934383\n",
      "Hamming Loss: 0.09929078014184398\n",
      "14/14 [==============================] - 2s 134ms/step - loss: 0.2612 - accuracy: 0.4656 - val_loss: 0.2878 - val_accuracy: 0.4255\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14/30\n",
      "14/14 [==============================] - 0s 31ms/stepss: 0.2536 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 14):\n",
      "Accuracy: 0.9051860649247823\n",
      "Precision: 0.8965251496464435\n",
      "Recall: 0.9051860649247823\n",
      "F1 Score: 0.8799059789112706\n",
      "Hamming Loss: 0.09481393507521774\n",
      "2/2 [==============================] - 0s 21ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 14):\n",
      "Accuracy: 0.8971631205673759\n",
      "Precision: 0.883735828544805\n",
      "Recall: 0.8971631205673759\n",
      "F1 Score: 0.8682682738303726\n",
      "Hamming Loss: 0.10283687943262411\n",
      "14/14 [==============================] - 2s 125ms/step - loss: 0.2542 - accuracy: 0.4679 - val_loss: 0.2870 - val_accuracy: 0.4468\n",
      "Epoch 15/30\n",
      "14/14 [==============================] - 0s 31ms/stepss: 0.2520 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 15):\n",
      "Accuracy: 0.9049881235154394\n",
      "Precision: 0.9030035401491963\n",
      "Recall: 0.9049881235154394\n",
      "F1 Score: 0.8762396488671529\n",
      "Hamming Loss: 0.09501187648456057\n",
      "2/2 [==============================] - 0s 19ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 15):\n",
      "Accuracy: 0.900709219858156\n",
      "Precision: 0.896590218292346\n",
      "Recall: 0.900709219858156\n",
      "F1 Score: 0.8709030371934383\n",
      "Hamming Loss: 0.09929078014184398\n",
      "14/14 [==============================] - 2s 135ms/step - loss: 0.2520 - accuracy: 0.4679 - val_loss: 0.2845 - val_accuracy: 0.4255\n",
      "Epoch 16/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.2434 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 16):\n",
      "Accuracy: 0.9081551860649247\n",
      "Precision: 0.9025396208534815\n",
      "Recall: 0.9081551860649247\n",
      "F1 Score: 0.8841396694753866\n",
      "Hamming Loss: 0.09184481393507522\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 16):\n",
      "Accuracy: 0.9024822695035462\n",
      "Precision: 0.892736574992038\n",
      "Recall: 0.9024822695035462\n",
      "F1 Score: 0.8777186727896927\n",
      "Hamming Loss: 0.0975177304964539\n",
      "14/14 [==============================] - 2s 127ms/step - loss: 0.2439 - accuracy: 0.4941 - val_loss: 0.2764 - val_accuracy: 0.4043\n",
      "Epoch 17/30\n",
      "14/14 [==============================] - 0s 32ms/stepss: 0.2374 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 17):\n",
      "Accuracy: 0.9103325415676959\n",
      "Precision: 0.9130350803186866\n",
      "Recall: 0.9103325415676959\n",
      "F1 Score: 0.8847055611385973\n",
      "Hamming Loss: 0.08966745843230403\n",
      "2/2 [==============================] - 0s 21ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 17):\n",
      "Accuracy: 0.8971631205673759\n",
      "Precision: 0.883735828544805\n",
      "Recall: 0.8971631205673759\n",
      "F1 Score: 0.8682682738303726\n",
      "Hamming Loss: 0.10283687943262411\n",
      "14/14 [==============================] - 2s 134ms/step - loss: 0.2376 - accuracy: 0.4893 - val_loss: 0.2807 - val_accuracy: 0.4043\n",
      "Epoch 18/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.2336 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 18):\n",
      "Accuracy: 0.916270783847981\n",
      "Precision: 0.9117877035889036\n",
      "Recall: 0.916270783847981\n",
      "F1 Score: 0.8984426246353204\n",
      "Hamming Loss: 0.083729216152019\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 18):\n",
      "Accuracy: 0.9060283687943262\n",
      "Precision: 0.8962186720381109\n",
      "Recall: 0.9060283687943262\n",
      "F1 Score: 0.8852719092840378\n",
      "Hamming Loss: 0.09397163120567376\n",
      "14/14 [==============================] - 2s 121ms/step - loss: 0.2346 - accuracy: 0.4988 - val_loss: 0.2689 - val_accuracy: 0.4255\n",
      "Epoch 19/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.2256 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 19):\n",
      "Accuracy: 0.9158749010292954\n",
      "Precision: 0.9128514631688786\n",
      "Recall: 0.9158749010292954\n",
      "F1 Score: 0.8968984479102217\n",
      "Hamming Loss: 0.08412509897070466\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 19):\n",
      "Accuracy: 0.9024822695035462\n",
      "Precision: 0.892736574992038\n",
      "Recall: 0.9024822695035462\n",
      "F1 Score: 0.8777186727896927\n",
      "Hamming Loss: 0.0975177304964539\n",
      "14/14 [==============================] - 2s 125ms/step - loss: 0.2255 - accuracy: 0.5249 - val_loss: 0.2698 - val_accuracy: 0.4043\n",
      "Epoch 20/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.2182 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 20):\n",
      "Accuracy: 0.9156769596199525\n",
      "Precision: 0.9068933178416918\n",
      "Recall: 0.9156769596199525\n",
      "F1 Score: 0.9012851119709637\n",
      "Hamming Loss: 0.08432304038004751\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 20):\n",
      "Accuracy: 0.9113475177304965\n",
      "Precision: 0.9052797478329393\n",
      "Recall: 0.9113475177304965\n",
      "F1 Score: 0.8924554858634307\n",
      "Hamming Loss: 0.08865248226950355\n",
      "14/14 [==============================] - 2s 121ms/step - loss: 0.2172 - accuracy: 0.5226 - val_loss: 0.2680 - val_accuracy: 0.4255\n",
      "Epoch 21/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.2161 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 21):\n",
      "Accuracy: 0.9263657957244655\n",
      "Precision: 0.9248051469891608\n",
      "Recall: 0.9263657957244655\n",
      "F1 Score: 0.9131034213526016\n",
      "Hamming Loss: 0.07363420427553444\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 21):\n",
      "Accuracy: 0.9078014184397163\n",
      "Precision: 0.8974987679409098\n",
      "Recall: 0.9078014184397163\n",
      "F1 Score: 0.8895381439322235\n",
      "Hamming Loss: 0.09219858156028368\n",
      "14/14 [==============================] - 2s 125ms/step - loss: 0.2169 - accuracy: 0.5392 - val_loss: 0.2640 - val_accuracy: 0.4894\n",
      "Epoch 22/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.2063 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 22):\n",
      "Accuracy: 0.9220110847189232\n",
      "Precision: 0.9202314657588303\n",
      "Recall: 0.9220110847189232\n",
      "F1 Score: 0.9064211498496073\n",
      "Hamming Loss: 0.0779889152810768\n",
      "2/2 [==============================] - 0s 21ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 22):\n",
      "Accuracy: 0.900709219858156\n",
      "Precision: 0.8866295045929183\n",
      "Recall: 0.900709219858156\n",
      "F1 Score: 0.877986906710311\n",
      "Hamming Loss: 0.09929078014184398\n",
      "14/14 [==============================] - 2s 121ms/step - loss: 0.2084 - accuracy: 0.5463 - val_loss: 0.2661 - val_accuracy: 0.4043\n",
      "Epoch 23/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.2077 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 23):\n",
      "Accuracy: 0.9309184481393508\n",
      "Precision: 0.9302666274864214\n",
      "Recall: 0.9309184481393508\n",
      "F1 Score: 0.9193936475803033\n",
      "Hamming Loss: 0.06908155186064925\n",
      "2/2 [==============================] - 0s 21ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 23):\n",
      "Accuracy: 0.9095744680851063\n",
      "Precision: 0.9029386769626947\n",
      "Recall: 0.9095744680851063\n",
      "F1 Score: 0.8896012711978477\n",
      "Hamming Loss: 0.09042553191489362\n",
      "14/14 [==============================] - 2s 127ms/step - loss: 0.2078 - accuracy: 0.5701 - val_loss: 0.2570 - val_accuracy: 0.4468\n",
      "Epoch 24/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.1914 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 24):\n",
      "Accuracy: 0.931908155186065\n",
      "Precision: 0.9321156641788678\n",
      "Recall: 0.931908155186065\n",
      "F1 Score: 0.9203917327975284\n",
      "Hamming Loss: 0.06809184481393507\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 24):\n",
      "Accuracy: 0.8971631205673759\n",
      "Precision: 0.8792356185973208\n",
      "Recall: 0.8971631205673759\n",
      "F1 Score: 0.8752483636015796\n",
      "Hamming Loss: 0.10283687943262411\n",
      "14/14 [==============================] - 2s 125ms/step - loss: 0.1917 - accuracy: 0.5962 - val_loss: 0.2582 - val_accuracy: 0.4468\n",
      "Epoch 25/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.1880 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 25):\n",
      "Accuracy: 0.9334916864608076\n",
      "Precision: 0.9310609355970821\n",
      "Recall: 0.9334916864608076\n",
      "F1 Score: 0.9241914283517387\n",
      "Hamming Loss: 0.0665083135391924\n",
      "2/2 [==============================] - 0s 23ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 25):\n",
      "Accuracy: 0.9095744680851063\n",
      "Precision: 0.8991346740628493\n",
      "Recall: 0.9095744680851063\n",
      "F1 Score: 0.8935847166679856\n",
      "Hamming Loss: 0.09042553191489362\n",
      "14/14 [==============================] - 2s 125ms/step - loss: 0.1881 - accuracy: 0.5796 - val_loss: 0.2507 - val_accuracy: 0.4894\n",
      "Epoch 26/30\n",
      "14/14 [==============================] - 0s 30ms/stepss: 0.1788 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 26):\n",
      "Accuracy: 0.9346793349168646\n",
      "Precision: 0.9301826845614709\n",
      "Recall: 0.9346793349168646\n",
      "F1 Score: 0.9280839518771844\n",
      "Hamming Loss: 0.06532066508313539\n",
      "2/2 [==============================] - 0s 22ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 26):\n",
      "Accuracy: 0.9042553191489362\n",
      "Precision: 0.890502278791886\n",
      "Recall: 0.9042553191489362\n",
      "F1 Score: 0.8904263597979966\n",
      "Hamming Loss: 0.09574468085106383\n",
      "14/14 [==============================] - 2s 125ms/step - loss: 0.1783 - accuracy: 0.6010 - val_loss: 0.2590 - val_accuracy: 0.4681\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 27/30\n",
      "14/14 [==============================] - 0s 32ms/stepss: 0.1787 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 27):\n",
      "Accuracy: 0.9392319873317498\n",
      "Precision: 0.9385060224514619\n",
      "Recall: 0.9392319873317498\n",
      "F1 Score: 0.9311110022917627\n",
      "Hamming Loss: 0.060768012668250194\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 27):\n",
      "Accuracy: 0.9166666666666666\n",
      "Precision: 0.9094292803970224\n",
      "Recall: 0.9166666666666666\n",
      "F1 Score: 0.9030467867249292\n",
      "Hamming Loss: 0.08333333333333333\n",
      "14/14 [==============================] - 2s 142ms/step - loss: 0.1787 - accuracy: 0.5962 - val_loss: 0.2456 - val_accuracy: 0.4043\n",
      "Epoch 28/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.1666 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 28):\n",
      "Accuracy: 0.9414093428345209\n",
      "Precision: 0.942117049417754\n",
      "Recall: 0.9414093428345209\n",
      "F1 Score: 0.9332976413276698\n",
      "Hamming Loss: 0.05859065716547902\n",
      "2/2 [==============================] - 0s 18ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 28):\n",
      "Accuracy: 0.9060283687943262\n",
      "Precision: 0.8940242393826133\n",
      "Recall: 0.9060283687943262\n",
      "F1 Score: 0.8880951196787789\n",
      "Hamming Loss: 0.09397163120567376\n",
      "14/14 [==============================] - 2s 120ms/step - loss: 0.1674 - accuracy: 0.6342 - val_loss: 0.2388 - val_accuracy: 0.4468\n",
      "Epoch 29/30\n",
      "14/14 [==============================] - 0s 28ms/stepss: 0.1581 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 29):\n",
      "Accuracy: 0.9352731591448931\n",
      "Precision: 0.9306017594995494\n",
      "Recall: 0.9352731591448931\n",
      "F1 Score: 0.9310238130026874\n",
      "Hamming Loss: 0.06472684085510688\n",
      "2/2 [==============================] - 0s 20ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 29):\n",
      "Accuracy: 0.9095744680851063\n",
      "Precision: 0.8991933071273699\n",
      "Recall: 0.9095744680851063\n",
      "F1 Score: 0.9010546637123237\n",
      "Hamming Loss: 0.09042553191489362\n",
      "14/14 [==============================] - 2s 120ms/step - loss: 0.1574 - accuracy: 0.6485 - val_loss: 0.2542 - val_accuracy: 0.4681\n",
      "Epoch 30/30\n",
      "14/14 [==============================] - 0s 29ms/stepss: 0.1602 - ac\n",
      "\n",
      "Metrics on the training set (Epoch 30):\n",
      "Accuracy: 0.9489311163895487\n",
      "Precision: 0.9481496772908413\n",
      "Recall: 0.9489311163895487\n",
      "F1 Score: 0.9438361114220138\n",
      "Hamming Loss: 0.0510688836104513\n",
      "2/2 [==============================] - 0s 21ms/step\n",
      "\n",
      "Metrics on the validation set (Epoch 30):\n",
      "Accuracy: 0.9131205673758865\n",
      "Precision: 0.9039977800126451\n",
      "Recall: 0.9131205673758865\n",
      "F1 Score: 0.8989211180749263\n",
      "Hamming Loss: 0.08687943262411348\n",
      "14/14 [==============================] - 2s 123ms/step - loss: 0.1607 - accuracy: 0.6366 - val_loss: 0.2377 - val_accuracy: 0.4681\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x1cd79f1c490>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keras.callbacks import Callback\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, hamming_loss\n",
    "import numpy as np\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Embedding, LSTM, Dense\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# Keras Tokenization\n",
    "tokenizer = Tokenizer(num_words=None)\n",
    "tokenizer.fit_on_texts(train['trans'])\n",
    "max_len = 150\n",
    "\n",
    "train_sequences = tokenizer.texts_to_sequences(train['trans'])\n",
    "test_sequences = tokenizer.texts_to_sequences(test['trans'])\n",
    "\n",
    "train_padded = pad_sequences(train_sequences, maxlen=max_len)\n",
    "test_padded = pad_sequences(test_sequences, maxlen=max_len)\n",
    "\n",
    "word_index = tokenizer.word_index\n",
    "\n",
    "# 'surah', 'verse', 'trans' are the columns to be dropped as labels\n",
    "y_train = train.drop(labels=['surah', 'verse', 'trans'], axis=1)\n",
    "y_test = test.drop(labels=['surah', 'verse', 'trans'], axis=1)\n",
    "\n",
    "# Load GloVe vectors into a dictionary\n",
    "glove_file_path = 'C:/Users/user/Desktop/MASTER/P1/ipynb/glove.6B/glove.6B.100d.txt'\n",
    "embeddings_index = {}\n",
    "\n",
    "with open(glove_file_path, encoding='utf-8') as glove_file:\n",
    "    for line in glove_file:\n",
    "        values = line.split(' ')\n",
    "        word = values[0]\n",
    "        coefs = np.asarray([float(val) for val in values[1:]])\n",
    "        embeddings_index[word] = coefs\n",
    "\n",
    "print('Found %s word vectors.' % len(embeddings_index))\n",
    "\n",
    "# Create an embedding matrix for the words in the vocabulary\n",
    "vocab_size = len(word_index) + 1\n",
    "embedding_matrix = np.zeros((vocab_size, 100))  # Assuming 100-dimensional embeddings\n",
    "\n",
    "for word, i in word_index.items():\n",
    "    embedding_vector = embeddings_index.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[i] = embedding_vector\n",
    "\n",
    "# Build LSTM Model with Embedding Layer\n",
    "model = Sequential()\n",
    "model.add(Embedding(vocab_size, 100, weights=[embedding_matrix], input_length=max_len, trainable=False))\n",
    "model.add(LSTM(100))\n",
    "model.add(Dense(12, activation='sigmoid'))  \n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# train_padded' and 'y_train' are original training data and labels\n",
    "x_train, x_val, y_train, y_val = train_test_split(train_padded, y_train, test_size=0.1, random_state=42)\n",
    "\n",
    "# Assuming 'x_train', 'y_train', 'x_val', 'y_val' are the training and validation data and labels\n",
    "metrics_callback = MetricsCallback(x_train=x_train, y_train=y_train, x_val=x_val, y_val=y_val)\n",
    "\n",
    "# Train the model with the callback\n",
    "model.fit(x_train, y_train, epochs=30, batch_size=32, validation_data=(x_val, y_val), callbacks=[metrics_callback])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f639d5b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4/4 [==============================] - 0s 26ms/step\n",
      "\n",
      "Metrics on the test set:\n",
      "Accuracy: 0.8985148514851485\n",
      "Precision: 0.8806767930016783\n",
      "Recall: 0.8985148514851485\n",
      "F1 Score: 0.88346280324292\n",
      "Hamming Loss: 0.10148514851485149\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "y_test_pred_probs = model.predict(test_padded)\n",
    "y_test_pred_binary = (y_test_pred_probs > 0.5).astype(int)\n",
    "\n",
    "y_test_flat = y_test.to_numpy().flatten()\n",
    "y_test_pred_flat = y_test_pred_binary.flatten()\n",
    "\n",
    "accuracy_test = accuracy_score(y_test_flat, y_test_pred_flat)\n",
    "precision_test = precision_score(y_test_flat, y_test_pred_flat, average='weighted')\n",
    "recall_test = recall_score(y_test_flat, y_test_pred_flat, average='weighted')\n",
    "f1_test = f1_score(y_test_flat, y_test_pred_flat, average='weighted')\n",
    "hamming_loss_test = hamming_loss(y_test_flat, y_test_pred_flat)\n",
    "\n",
    "print(\"\\nMetrics on the test set:\")\n",
    "print(\"Accuracy:\", accuracy_test)\n",
    "print(\"Precision:\", precision_test)\n",
    "print(\"Recall:\", recall_test)\n",
    "print(\"F1 Score:\", f1_test)\n",
    "print(\"Hamming Loss:\", hamming_loss_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c542bb4",
   "metadata": {},
   "source": [
    "## XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "169dc421",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model: XGBoost\n",
      "Accuracy: 0.4079601990049751\n",
      "Precision: 0.5874233902949022\n",
      "Recall: 0.4079601990049751\n",
      "F1 Score: 0.4134423245382731\n",
      "Hamming Loss: 0.5920398009950248\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "# Create and train the model\n",
    "xgb = XGBClassifier()\n",
    "xgb.fit(x_train, y_train_binary)\n",
    "\n",
    "# Evaluate the model\n",
    "evaluate_model(xgb, x_test, y_test_binary, \"XGBoost\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
